{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a Star Wars Aurebesh translator web application built with React and Express. The application allows users to translate between English and Aurebesh (the fictional script from Star Wars), featuring an interactive keyboard, translation history, saved phrases, and educational games like flashcards and word search. The app includes multiple Star Wars-themed UI themes and provides OCR functionality for image-based translation.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite for development and building\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives with Tailwind CSS\n- **State Management**: React Query (TanStack Query) for server state management and React hooks for local state\n- **Routing**: Wouter for lightweight client-side routing\n- **Styling**: Tailwind CSS with custom CSS variables for theming, VT323 font for Star Wars aesthetic\n- **Component Architecture**: Modular component structure with reusable UI components, custom hooks for business logic\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with JSON responses\n- **Storage Interface**: Abstract storage interface with in-memory implementation (designed for easy database integration)\n- **Validation**: Zod schemas for request/response validation\n- **File Handling**: Multer for image upload processing\n- **Development**: Hot module replacement via Vite integration\n\n## Data Storage Solutions\n- **Current Implementation**: In-memory storage with Map-based data structures\n- **Database Ready**: Drizzle ORM configured for PostgreSQL with Neon Database serverless connection\n- **Schema Design**: Separate entities for history entries, saved phrases, game progress, and user settings\n- **Migration Support**: Drizzle Kit configured for database schema migrations\n\n## Authentication and Authorization\n- **Current State**: No authentication implemented\n- **Session Preparation**: Express session middleware configured (connect-pg-simple) for future user sessions\n- **Architecture**: Designed for easy addition of user authentication with session-based approach\n\n## Key Features\n- **Translation Engine**: Custom Aurebesh ligature mapping with bidirectional English-Aurebesh conversion\n- **Interactive Keyboard**: Virtual Aurebesh keyboard with ligature support\n- **Theme System**: Five Star Wars-themed UI variants (Rebel, Imperial, Light Side, Dark Side, Bounty Hunter)\n- **Educational Games**: Flashcards with tier-based progression and word search puzzle generation\n- **Storage Features**: Translation history, saved phrases, and persistent game progress\n- **OCR Integration**: Image upload with OCR processing endpoint (implementation pending)\n- **Audio Feedback**: Sound effects for game interactions\n- **Responsive Design**: Mobile-optimized interface with touch-friendly interactions\n\n# External Dependencies\n\n## Database\n- **Neon Database**: Serverless PostgreSQL database\n- **Drizzle ORM**: Database toolkit and query builder\n- **Connection**: @neondatabase/serverless for database connectivity\n\n## UI and Styling\n- **Radix UI**: Headless UI components (@radix-ui/react-* packages)\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide Icons**: Icon library for UI elements\n- **Google Fonts**: VT323 and other fonts for theming\n\n## Development Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Type system and compiler\n- **ESBuild**: JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Autoprefixer\n\n## Runtime Libraries\n- **React Query**: Server state management and caching\n- **React Hook Form**: Form handling with validation\n- **Wouter**: Lightweight routing library\n- **Date-fns**: Date utility library\n- **Class Variance Authority**: Utility for conditional CSS classes\n- **CLSX**: Conditional className utility\n\n## Future Integrations\n- **OCR Service**: Planned integration for image-to-text conversion\n- **Audio API**: Web Audio API for enhanced sound effects\n- **File Storage**: Potential cloud storage for user-uploaded images","size_bytes":4227},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        aurebesh: [\"var(--font-aurebesh)\"],\n        'star-wars': ['VT323', 'monospace'],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"bounce-in\": {\n          \"0%\": { transform: \"scale(0.8)\", opacity: \"0\" },\n          \"50%\": { transform: \"scale(1.1)\", opacity: \"1\" },\n          \"100%\": { transform: \"scale(1)\", opacity: \"1\" },\n        },\n        \"pulse-success\": {\n          \"0%, 100%\": { backgroundColor: \"var(--accent)\" },\n          \"50%\": { backgroundColor: \"var(--primary)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"bounce-in\": \"bounce-in 0.3s ease-out\",\n        \"pulse-success\": \"pulse-success 0.5s ease-in-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2608},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/main_1756766887875.py":{"content":"import os, json\r\nprint(\"OPENAI_API_KEY =\", os.getenv(\"OPENAI_API_KEY\"))\r\n\r\nfrom kivy.metrics import dp\r\nfrom kivy.app import App\r\nfrom kivy.uix.boxlayout import BoxLayout\r\nfrom kivy.uix.anchorlayout import AnchorLayout\r\nfrom kivy.uix.gridlayout import GridLayout\r\nfrom kivy.uix.textinput import TextInput\r\nfrom kivy.uix.button import Button\r\nfrom kivy.uix.dropdown import DropDown\r\nfrom kivy.uix.label import Label\r\nfrom kivy.uix.modalview import ModalView\r\nfrom kivy.uix.slider import Slider\r\nfrom kivy.uix.togglebutton import ToggleButton\r\nfrom kivy.uix.scrollview import ScrollView\r\nfrom kivy.core.window import Window\r\nfrom kivy.core.clipboard import Clipboard\r\nfrom kivy.clock import Clock\r\nfrom kivy.graphics import Color, Rectangle, Line\r\nimport unicodedata, json, os, webbrowser\r\nfrom datetime import datetime\r\nfrom kivy.uix.filechooser import FileChooserIconView\r\nfrom threading import Thread\r\nfrom kivy.uix.widget import Widget\r\nfrom kivy.uix.progressbar import ProgressBar\r\nfrom kivy.animation import Animation\r\nfrom kivy.core.audio import SoundLoader\r\n\r\n\r\n# -----------------------------\r\n# Fixed Icon Button Class (48x48dp)\r\n# -----------------------------\r\nclass FixedIconButton(Button):\r\n    def __init__(self, **kwargs):\r\n        kwargs.setdefault('size_hint', (None, None))\r\n        kwargs.setdefault('size', (dp(48), dp(48)))\r\n        super().__init__(**kwargs)\r\n        self.background_normal = ''\r\n\r\n# -----------------------------\r\n# Main Icon Button with Active State Behavior\r\n# -----------------------------\r\ndef hex_to_rgba(hex_color, alpha=1):\r\n    hex_color = hex_color.lstrip('#')\r\n    lv = len(hex_color)\r\n    if lv == 6:\r\n        r, g, b = tuple(int(hex_color[i:i+2], 16) for i in range(0, 6, 2))\r\n    elif lv == 3:\r\n        r, g, b = tuple(int(hex_color[i]*2, 16) for i in range(0, 3))\r\n    else:\r\n        r, g, b = (0, 0, 0)\r\n    return (r/255, g/255, b/255, alpha)\r\n\r\nMAIN_BTN_NORMAL = lambda: hex_to_rgba(\"e5703d\")\r\nMAIN_BTN_ACTIVE = lambda: hex_to_rgba(\"dd4e1e\")\r\n\r\nclass MainIconButton(FixedIconButton):\r\n    def __init__(self, **kwargs):\r\n        self.normal_color = kwargs.pop('normal_color', MAIN_BTN_NORMAL())\r\n        self.active_color = kwargs.pop('active_color', MAIN_BTN_ACTIVE())\r\n        super().__init__(**kwargs)\r\n        self.background_color = self.normal_color\r\n\r\n    def on_press(self):\r\n        self.background_color = self.active_color\r\n        return super().on_press()\r\n\r\n    def on_release(self):\r\n        self.background_color = self.normal_color\r\n        return super().on_release()\r\n\r\n# -----------------------------\r\n# VIEW_MODES: Color schemes per view.\r\n# -----------------------------\r\nVIEW_MODES = {\r\n    \"Rebel\": {\r\n         \"bg\": hex_to_rgba(\"f0ece1\"),\r\n         \"container\": hex_to_rgba(\"3b444b\"),\r\n         \"label\": hex_to_rgba(\"080808\"),\r\n         \"input_text\": hex_to_rgba(\"f0ece1\"),\r\n         \"accent\": hex_to_rgba(\"dd4e1e\"),\r\n         \"icon_normal\": hex_to_rgba(\"e5703d\"),\r\n         \"icon_active\": hex_to_rgba(\"dd4e1e\")\r\n    },\r\n    \"Imperial\": {\r\n         \"bg\": hex_to_rgba(\"3B444B\"),\r\n         \"container\": hex_to_rgba(\"080808\"),\r\n         \"label\": hex_to_rgba(\"9c1b1b\"),\r\n         \"input_text\": hex_to_rgba(\"F0ECE1\"),\r\n         \"accent\": hex_to_rgba(\"D63333\"),\r\n         \"icon_normal\": hex_to_rgba(\"9c1b1b\"),\r\n         \"icon_active\": hex_to_rgba(\"D63333\")\r\n    },\r\n    \"Light Side\": {  # formerly Jedi\r\n         \"bg\": hex_to_rgba(\"998b71\"),\r\n         \"container\": hex_to_rgba(\"3b444b\"),\r\n         \"label\": hex_to_rgba(\"90caff\"),\r\n         \"input_text\": hex_to_rgba(\"c4ac8b\"),\r\n         \"accent\": hex_to_rgba(\"90f3b7\"),\r\n         \"icon_normal\": hex_to_rgba(\"90caff\"),\r\n         \"icon_active\": hex_to_rgba(\"90f3b7\")\r\n    },\r\n    \"Dark Side\": {   # formerly Sith\r\n         \"bg\": hex_to_rgba(\"242424\"),\r\n         \"container\": hex_to_rgba(\"000000\"),\r\n         \"label\": hex_to_rgba(\"ff0000\"),\r\n         \"input_text\": hex_to_rgba(\"F0ECE1\"),\r\n         \"accent\": hex_to_rgba(\"dfdfdf\"),\r\n         \"icon_normal\": hex_to_rgba(\"ff0000\"),\r\n         \"icon_active\": hex_to_rgba(\"2d2b3c\")\r\n    },\r\n    \"Bounty Hunter\": {\r\n         \"bg\": hex_to_rgba(\"a6918d\"),\r\n         \"container\": hex_to_rgba(\"16071a\"),\r\n         \"label\": hex_to_rgba(\"fff8f1\"),\r\n         \"input_text\": hex_to_rgba(\"aaaaaa\"),\r\n         \"accent\": hex_to_rgba(\"889273\"),\r\n         \"icon_normal\": hex_to_rgba(\"889273\"),  # updated from \"aaaaaa\" to \"889273\"\r\n         \"icon_active\": hex_to_rgba(\"889273\")\r\n    }\r\n}\r\nCURRENT_VIEW = \"Rebel\"\r\nWindow.clearcolor = VIEW_MODES[CURRENT_VIEW][\"bg\"]\r\n\r\n# -----------------------------\r\n# Helper: Draw blue border when focused.\r\n# -----------------------------\r\ndef update_border(widget, focused):\r\n    widget.canvas.after.clear()\r\n    if focused:\r\n        with widget.canvas.after:\r\n            Color(0, 0, 1, 1)\r\n            Line(rectangle=(widget.x, widget.y, widget.width, widget.height), width=dp(2))\r\n\r\n# -----------------------------\r\n# Helper: Compute a contrasting text color\r\n# -----------------------------\r\ndef get_contrasting_color(rgba):\r\n    r, g, b, _ = rgba\r\n    luminance = 0.2126 * r + 0.7152 * g + 0.0722 * b\r\n    return (0, 0, 0, 1) if luminance > 0.5 else (1, 1, 1, 1)\r\n\r\n# -----------------------------\r\n# Define Ligatures and Mappings\r\n# -----------------------------\r\nligatures = {\r\n    \"ch\": \"\\ue011\",\r\n    \"sh\": \"\\ue016\",\r\n    \"th\": \"\\ue018\",\r\n    \"ae\": \"\\ue010\",\r\n    \"eo\": \"\\ue012\",\r\n    \"kh\": \"\\ue013\",\r\n    \"oo\": \"\\ue015\",\r\n    \"ng\": \"\\ue014\"\r\n}\r\n\r\ndef english_to_aurebesh(text):\r\n    text = text.lower()\r\n    result = \"\"\r\n    i = 0\r\n    while i < len(text):\r\n        if i < len(text)-1 and text[i:i+2] in ligatures:\r\n            result += ligatures[text[i:i+2]]\r\n            i += 2\r\n        else:\r\n            result += text[i].upper()\r\n            i += 1\r\n    return result\r\n\r\ndef aurebesh_to_english(text):\r\n    result = \"\"\r\n    for char in text:\r\n        norm_char = unicodedata.normalize('NFC', char)\r\n        cp = ord(norm_char)\r\n        matched = False\r\n        for lig, glyph in ligatures.items():\r\n            if cp == ord(glyph):\r\n                result += lig\r\n                matched = True\r\n                break\r\n        if not matched:\r\n            result += norm_char.lower()\r\n    return result\r\n\r\n# -----------------------------\r\n# Persistent Storage for Saved Phrases and History\r\n# -----------------------------\r\npreset_phrases = [\r\n  \"May the Force be with you\",\r\n  \"I have a bad feeling about this\",\r\n  \"Do. Or do not. There is no try.\",\r\n  \"This is the way\",\r\n  \"Use the Force, Luke.\",\r\n  \"Help me, Obi-Wan Kenobi. You’re my only hope.\",\r\n  \"These aren’t the droids you’re looking for.\",\r\n  \"I find your lack of faith disturbing.\",\r\n  \"The Force will be with you. Always.\",\r\n  \"Never tell me the odds!\",\r\n  \"It’s a trap!\",\r\n  \"In my experience, there's no such thing as luck.\",\r\n  \"Stay on target.\",\r\n  \"I am your father.\",\r\n  \"I will not be the last Jedi.\",\r\n  \"Rebellions are built on hope.\",\r\n  \"I am one with the Force. The Force is with me.\",\r\n  \"I feel the good in you, the conflict.\",\r\n  \"Your eyes can deceive you; don’t trust them.\",\r\n  \"The circle is now complete.\",\r\n  \"Remember, the Force will be with you, always.\",\r\n  \"Now this is podracing!\",\r\n  \"You were the chosen one!\",\r\n  \"I have the highground\",\r\n  \"You’ve taken your first step into a larger world.\",\r\n  \"Only a Sith deals in absolutes.\",\r\n  \"Power! Unlimited power!\",\r\n  \"I’m altering the deal. Pray I don’t alter it any further.\",\r\n  \"Why, you stuck-up, half-witted, scruffy-looking nerf herder!\",\r\n  \"I suggest a new strategy, R2. Let the Wookiee win.\",\r\n  \"Truly wonderful, the mind of a child is.\",\r\n  \"I am a Jedi, like my father before me.\",\r\n  \"You don’t know the power of the dark side!\",\r\n  \"Chewie, we’re home.\",\r\n  \"I’ll never turn to the dark side.\",\r\n  \"I’ve been waiting for you, Obi-Wan.\",\r\n  \"I’ve got a bad feeling about this.\",\r\n  \"I want to go home and rethink my life.\",\r\n  \"That’s no moon. It’s a space station.\",\r\n  \"You don’t believe in the Force, do you?\",\r\n  \"Mind tricks don’t work on me.\",\r\n  \"I’m just a simple man trying to make my way in the universe.\",\r\n  \"Fear leads to anger. Anger leads to hate. Hate leads to suffering.\",\r\n  \"We take them together.\",\r\n  \"Light the fire.\",\r\n  \"It’s not about lifting rocks.\",\r\n  \"You know, sometimes I amaze even myself.\",\r\n  \"This deal is getting worse all the time.\",\r\n  \"It’s like poetry, it rhymes.\",\r\n  \"The Force is strong with this one.\",\r\n  \"Let the Wookiee win.\",\r\n  \"Don’t get cocky.\",\r\n  \"Somebody has to save our skins.\",\r\n  \"Clearly the kid is the brains of the operation.\",\r\n  \"Understanding you does not mean I agree with you.\",\r\n  \"Oh, I'm confident, I'm just not stupid.\",\r\n  \"Good soldiers follow orders.\",\r\n  \"This Is on You Now. This Is Like Skin.\",\r\n  \"You've Become More Than Your Fear.\",\r\n  \"That Ends Today! There Is One Way Out.\",\r\n  \"The Empire Is a Disease That Thrives in Darkness.\",\r\n  \"We're the Rhydo, Kid. We're the Fuel.\",\r\n  \"Remember This: Try.\",\r\n  \"The Death of Truth Is the Ultimate Victory of Evil.\",\r\n  \"I Burn My Life to Make a Sunrise That I Know I'll Never See.\",\r\n  \"Tyranny requires constant effort.\",\r\n  \"So this is how liberty dies. With Thunderous applause.\",\r\n  \"Your focus determines your reality.\",\r\n  \"There's always a bigger fish.\",\r\n  \"Fear is the path to the dark side.\",\r\n  \"Luminous beings are we, not this crude matter.\",\r\n  \"The greatest teacher, failure is.\",\r\n  \"We are what they grow beyond.\",\r\n  \"Adventure. Excitement. A jedi craves not these things.\",\r\n  \"You must unlearn what you have learned.\",\r\n  \"To defeat an enemy, you must know them.\",\r\n  \"Be careful not to choke on your aspirations.\",\r\n  \"This will be a day long remembered.\",\r\n  \"The Force, the Jedi. All of it. It's all true.\",\r\n  \"I am no Jedi, but I know the Force.\",\r\n  \"An elegant weapon for a more civilized age.\",\r\n\r\n]\r\n\r\n\r\nSAVED_PHRASES_FILE = os.path.join(os.path.dirname(__file__), \"saved_phrases.json\")\r\ndef load_saved_phrases():\r\n    try:\r\n        with open(SAVED_PHRASES_FILE, \"r\", encoding=\"utf-8\") as f:\r\n            return json.load(f)\r\n    except Exception as e:\r\n        print(\"No saved phrases found:\", e)\r\n        return []\r\ndef save_phrases_to_file(phrases):\r\n    try:\r\n        with open(SAVED_PHRASES_FILE, \"w\", encoding=\"utf-8\") as f:\r\n            json.dump(phrases, f, ensure_ascii=False, indent=2)\r\n    except Exception as e:\r\n        print(\"Error saving phrases:\", e)\r\nsaved_phrases = load_saved_phrases()\r\ndef get_all_phrases():\r\n    return preset_phrases + saved_phrases\r\n\r\nUNLOCKED_TIERS_FILE = os.path.join(os.path.dirname(__file__), \"unlocked_tiers.json\")\r\n\r\ndef load_unlocked_tiers():\r\n    try:\r\n        with open(UNLOCKED_TIERS_FILE, \"r\", encoding=\"utf-8\") as f:\r\n            return set(json.load(f).get(\"tiers\", [1]))\r\n    except:\r\n        return {1}\r\n\r\ndef save_unlocked_tiers(tiers_set):\r\n    try:\r\n        with open(UNLOCKED_TIERS_FILE, \"w\", encoding=\"utf-8\") as f:\r\n            json.dump({\"tiers\": sorted(tiers_set)}, f, indent=2)\r\n    except Exception as e:\r\n        print(\"Error saving unlocked tiers:\", e)\r\n\r\nHISTORY_FILE = os.path.join(os.path.dirname(__file__), \"history.json\")\r\ndef load_history():\r\n    try:\r\n        with open(HISTORY_FILE, \"r\", encoding=\"utf-8\") as f:\r\n            return json.load(f)\r\n    except Exception as e:\r\n        print(\"No history found:\", e)\r\n        return []\r\ndef save_history(history_list):\r\n    try:\r\n        with open(HISTORY_FILE, \"w\", encoding=\"utf-8\") as f:\r\n            json.dump(history_list, f, ensure_ascii=False, indent=2)\r\n    except Exception as e:\r\n        print(\"Error saving history:\", e)\r\nhistory = load_history()\r\ndef add_history_entry(eng, aus):\r\n    if not eng.strip():\r\n        return\r\n    if history and history[-1][\"english\"] == eng:\r\n        return\r\n    entry = {\r\n        \"english\": eng,\r\n        \"aurebesh\": aus,\r\n        \"favorite\": False,\r\n        \"timestamp\": datetime.now().isoformat()\r\n    }\r\n    history.append(entry)\r\n    save_history(history)\r\n\r\nimport random\r\nimport string\r\n\r\ndef generate_word_search(words, size):\r\n    # Initialize empty grid\r\n    grid = [['' for _ in range(size)] for _ in range(size)]\r\n    directions = [(0,1),(1,0),(1,1),(-1,1)]  # H, V, Diag down, Diag up\r\n    placed = []\r\n\r\n    for word in words:\r\n        word = word.upper()\r\n        wlen = len(word)\r\n        placed_ok = False\r\n        attempts = 0\r\n\r\n        while not placed_ok and attempts < 100:\r\n            attempts += 1\r\n            dir_x, dir_y = random.choice(directions)\r\n            # pick starting cell so word fits\r\n            if dir_x == 1:\r\n                start_x = random.randrange(0, size - wlen + 1)\r\n            elif dir_x == -1:\r\n                start_x = random.randrange(wlen-1, size)\r\n            else:\r\n                start_x = random.randrange(0, size)\r\n            if dir_y == 1:\r\n                start_y = random.randrange(0, size - wlen + 1)\r\n            elif dir_y == -1:\r\n                start_y = random.randrange(wlen-1, size)\r\n            else:\r\n                start_y = random.randrange(0, size)\r\n\r\n            # check slot clear or matching letters\r\n            can_place = True\r\n            coords = []\r\n            for i in range(wlen):\r\n                x = start_x + dir_x * i\r\n                y = start_y + dir_y * i\r\n                existing = grid[y][x]\r\n                if existing not in ('', word[i]):\r\n                    can_place = False\r\n                    break\r\n                coords.append((x,y))\r\n            if not can_place:\r\n                continue\r\n\r\n            # place the word\r\n            for i, (x,y) in enumerate(coords):\r\n                grid[y][x] = word[i]\r\n            placed.append((word, coords))\r\n            placed_ok = True\r\n\r\n        if not placed_ok:\r\n            raise ValueError(f\"Couldn’t place word {word}\")\r\n\r\n    # fill in blanks\r\n    for y in range(size):\r\n        for x in range(size):\r\n            if grid[y][x] == '':\r\n                grid[y][x] = random.choice(string.ascii_uppercase)\r\n\r\n    return grid, placed\r\n\r\n# -----------------------------\r\n# Base Class for Full-Window Pop-ups\r\n# -----------------------------\r\nclass FullPopup(ModalView):\r\n    \"\"\"Base class for full-window pop-ups with a header bar.\"\"\"\r\n    def __init__(self, title_text, translator_widget, **kwargs):\r\n        super().__init__(**kwargs)\r\n        self.translator = translator_widget\r\n        cs = self.translator.colors\r\n        self.size_hint = (1, 1)\r\n        self.background_color = cs[\"bg\"]\r\n        self.unlocked_tiers = load_unlocked_tiers()\r\n\r\n        # Header bar (48dp high) with title and an X close button.\r\n        header = BoxLayout(\r\n            orientation=\"horizontal\", \r\n            size_hint=(1, None), \r\n            height=dp(48)\r\n        )\r\n        \r\n        header_title = Label(\r\n            text=title_text,\r\n            font_size=dp(24),\r\n            font_name=\"fonts/VT323-Regular.ttf\",\r\n            color=cs[\"input_text\"],\r\n            halign=\"left\",\r\n            size_hint=(1, 1)\r\n        )\r\n        header_title.bind(size=lambda inst, val: setattr(inst, 'text_size', (val[0], val[1])))\r\n        header.add_widget(header_title)\r\n        close_btn = MainIconButton(\r\n            text=\"\\uf057\",\r\n            font_size=dp(24),\r\n            normal_color=cs[\"icon_normal\"],\r\n            active_color=cs[\"icon_active\"],\r\n            font_name=\"fonts/icon-font.ttf\",\r\n            size_hint=(None, None),\r\n            size=(dp(48), dp(48))\r\n        )\r\n        close_btn.bind(on_release=lambda x: self.dismiss())\r\n        header.add_widget(close_btn)\r\n\r\n        self.main_layout = BoxLayout(orientation=\"vertical\", spacing=dp(10))\r\n        anchor = AnchorLayout(anchor_y=\"top\", size_hint=(1, None))\r\n        anchor.add_widget(header)\r\n        self.main_layout.add_widget(anchor)\r\n        self.content_area = BoxLayout(orientation=\"vertical\", padding=[dp(10)]*2)\r\n        self.main_layout.add_widget(self.content_area)\r\n        self.add_widget(self.main_layout)\r\n\r\n# -----------------------------\r\n# About Popup – New (with Disclaimer)\r\n# -----------------------------\r\nclass AboutPopup(FullPopup):\r\n    def __init__(self, translator_widget, **kwargs):\r\n        super().__init__(\"About\", translator_widget, **kwargs)\r\n        cs = self.translator.colors\r\n        content = BoxLayout(orientation=\"vertical\", spacing=dp(10), padding=[dp(10)]*2)\r\n        info = (\r\n            \"Imperial Remnant Podcast © 2025\\n\"\r\n            \"All rights reserved.\\n\\n\"\r\n            \"This app translates English to Aurebesh for personal use only. \"\r\n            \"No warranty is provided.\\n\\n\"\r\n            \"Assets used in this app (fonts, icons, etc.) are either open source \"\r\n            \"or licensed for personal use only.\\n\\n\"\r\n            \"For more content, visit our YouTube channel:\\nhttps://www.youtube.com/@imperialremnantpodcast\\n\\n\"\r\n            \"Disclaimer: This is a fan-made app created for entertainment purposes only. \"\r\n            \"It is not an official Star Wars product and is not affiliated with Lucasfilm, Disney, or any related entities.\"\r\n        )\r\n        info_label = Label(\r\n            text=info,\r\n            font_size=dp(20),\r\n            font_name=\"fonts/VT323-Regular.ttf\",\r\n            color=cs[\"input_text\"],\r\n            halign=\"left\",\r\n            valign=\"middle\"\r\n        )\r\n        info_label.bind(size=lambda inst, val: setattr(inst, 'text_size', (val[0], val[1])))\r\n        content.add_widget(info_label)\r\n        self.content_area.add_widget(content)\r\n\r\n# -----------------------------\r\n# History Popup\r\n# -----------------------------\r\nclass HistoryPopup(FullPopup):\r\n    def __init__(self, translator_widget, **kwargs):\r\n        super().__init__(\"Translation History\", translator_widget, **kwargs)\r\n        self.populate_history()\r\n        if self.translator.english_input.text.strip():\r\n            add_history_entry(self.translator.english_input.text, self.translator.aurebesh_input.text)\r\n\r\n    def populate_history(self):\r\n        self.content_area.clear_widgets()\r\n        cs = self.translator.colors\r\n        scroll = ScrollView(size_hint=(1, 1))\r\n        history_layout = BoxLayout(orientation=\"vertical\", size_hint_y=None, spacing=dp(5), padding=[dp(10)]*2)\r\n        history_layout.bind(minimum_height=history_layout.setter(\"height\"))\r\n        row_height = dp(48)\r\n        fixed_darker = hex_to_rgba(\"2b3237\")\r\n        row_index = 0\r\n        for idx in range(len(history) - 1, -1, -1):\r\n            entry = history[idx]\r\n            row_color = cs[\"container\"] if row_index % 2 == 0 else fixed_darker\r\n            row = BoxLayout(orientation=\"horizontal\", size_hint_y=None, height=row_height, spacing=dp(5))\r\n            with row.canvas.before:\r\n                Color(*row_color)\r\n                rect = Rectangle(pos=row.pos, size=row.size)\r\n            row.bind(pos=lambda inst, val, rect=rect: setattr(rect, 'pos', inst.pos))\r\n            row.bind(size=lambda inst, val, rect=rect: setattr(rect, 'size', inst.size))\r\n            label = Label(\r\n                text=entry['english'],\r\n                size_hint_x=0.6,\r\n                halign=\"left\",\r\n                valign=\"middle\",\r\n                color=cs[\"input_text\"],\r\n                font_name=\"fonts/VT323-Regular.ttf\"\r\n            )\r\n            label.bind(size=lambda inst, val: setattr(inst, 'text_size', (val[0], val[1])))\r\n            row.add_widget(label)\r\n            copy_btn = MainIconButton(\r\n                text=\"\\uf0c5\",\r\n                font_size=dp(24),\r\n                normal_color=cs[\"icon_normal\"],\r\n                active_color=cs[\"icon_active\"],\r\n                font_name=\"fonts/icon-font.ttf\"\r\n            )\r\n            copy_btn.bind(on_release=lambda x, p=entry['english']: Clipboard.copy(p))\r\n            row.add_widget(copy_btn)\r\n            fav_btn = MainIconButton(\r\n                text=\"\\uf005\",\r\n                font_size=dp(24),\r\n                normal_color=cs[\"icon_normal\"] if entry.get(\"favorite\", False) else (0.5, 0.5, 0.5, 1),\r\n                active_color=cs[\"icon_active\"],\r\n                font_name=\"fonts/icon-font.ttf\"\r\n            )\r\n            fav_btn.bind(on_release=lambda x, i=idx: self.toggle_favorite(i))\r\n            row.add_widget(fav_btn)\r\n            del_btn = MainIconButton(\r\n                text=\"\\uf1f8\",\r\n                font_size=dp(24),\r\n                normal_color=cs[\"icon_normal\"],\r\n                active_color=cs[\"icon_active\"],\r\n                font_name=\"fonts/icon-font.ttf\"\r\n            )\r\n            del_btn.bind(on_release=lambda x, i=idx: self.delete_entry(i))\r\n            row.add_widget(del_btn)\r\n            history_layout.add_widget(row)\r\n            row_index += 1\r\n        scroll.add_widget(history_layout)\r\n        self.content_area.add_widget(scroll)\r\n\r\n    def toggle_favorite(self, index):\r\n        history[index][\"favorite\"] = not history[index].get(\"favorite\", False)\r\n        phrase = history[index][\"english\"]\r\n        if history[index][\"favorite\"]:\r\n            if phrase not in saved_phrases:\r\n                saved_phrases.append(phrase)\r\n                save_phrases_to_file(saved_phrases)\r\n        else:\r\n            if phrase in saved_phrases:\r\n                saved_phrases.remove(phrase)\r\n                save_phrases_to_file(saved_phrases)\r\n        save_history(history)\r\n        self.populate_history()\r\n\r\n    def delete_entry(self, index):\r\n        try:\r\n            del history[index]\r\n            save_history(history)\r\n            self.populate_history()\r\n        except IndexError:\r\n            pass\r\n\r\n# -----------------------------\r\n# Saved Popup\r\n# -----------------------------\r\nclass SavedPopup(FullPopup):\r\n    def __init__(self, translator_widget, **kwargs):\r\n        super().__init__(\"Saved Phrases\", translator_widget, **kwargs)\r\n        self.populate_saved()\r\n\r\n    def populate_saved(self):\r\n        self.content_area.clear_widgets()\r\n        cs = self.translator.colors\r\n        scroll = ScrollView(size_hint=(1, 1))\r\n        saved_layout = BoxLayout(orientation=\"vertical\", size_hint_y=None, spacing=dp(5), padding=[dp(10)]*2)\r\n        saved_layout.bind(minimum_height=saved_layout.setter(\"height\"))\r\n        row_height = dp(48)\r\n        fixed_darker = hex_to_rgba(\"2b3237\")\r\n        row_index = 0\r\n        for phrase in saved_phrases:\r\n            row_color = cs[\"container\"] if row_index % 2 == 0 else fixed_darker\r\n            row = BoxLayout(orientation=\"horizontal\", size_hint_y=None, height=row_height, spacing=dp(5))\r\n            with row.canvas.before:\r\n                Color(*row_color)\r\n                rect = Rectangle(pos=row.pos, size=row.size)\r\n            row.bind(pos=lambda inst, val, rect=rect: setattr(rect, 'pos', inst.pos))\r\n            row.bind(size=lambda inst, val, rect=rect: setattr(rect, 'size', inst.size))\r\n            label = Label(\r\n                text=phrase,\r\n                size_hint_x=0.7,\r\n                halign=\"left\",\r\n                valign=\"middle\",\r\n                color=cs[\"input_text\"],\r\n                font_name=\"fonts/VT323-Regular.ttf\"\r\n            )\r\n            label.bind(size=lambda inst, val: setattr(inst, 'text_size', (val[0], val[1])))\r\n            row.add_widget(label)\r\n            copy_btn = MainIconButton(\r\n                text=\"\\uf0c5\",\r\n                font_size=dp(24),\r\n                normal_color=cs[\"icon_normal\"],\r\n                active_color=cs[\"icon_active\"],\r\n                font_name=\"fonts/icon-font.ttf\"\r\n            )\r\n            copy_btn.bind(on_release=lambda x, p=phrase: Clipboard.copy(p))\r\n            row.add_widget(copy_btn)\r\n            del_btn = MainIconButton(\r\n                text=\"\\uf1f8\",\r\n                font_size=dp(24),\r\n                normal_color=cs[\"icon_normal\"],\r\n                active_color=cs[\"icon_active\"],\r\n                font_name=\"fonts/icon-font.ttf\"\r\n            )\r\n            del_btn.bind(on_release=lambda x, p=phrase: self.delete_saved(p))\r\n            row.add_widget(del_btn)\r\n            saved_layout.add_widget(row)\r\n            row_index += 1\r\n        scroll.add_widget(saved_layout)\r\n        self.content_area.add_widget(scroll)\r\n\r\n    def delete_saved(self, phrase):\r\n        if phrase in saved_phrases:\r\n            saved_phrases.remove(phrase)\r\n            save_phrases_to_file(saved_phrases)\r\n            self.populate_saved()\r\n\r\n# -----------------------------\r\n# Settings Popup – Updated\r\n# -----------------------------\r\nclass SettingsPopup(FullPopup):\r\n    def __init__(self, translator_widget, **kwargs):\r\n        super().__init__(\"Settings\", translator_widget, **kwargs)\r\n        cs = self.translator.colors\r\n        content = BoxLayout(orientation=\"vertical\", spacing=dp(10), size_hint_y=1, padding=[dp(10)]*2)\r\n        # Font Size Row\r\n        fs_row = BoxLayout(orientation=\"horizontal\", size_hint=(1, None), height=dp(48), spacing=dp(10))\r\n        fs_label = Label(\r\n            text=\"Font Size:\",\r\n            size_hint=(0.4, 1),\r\n            font_size=dp(28),\r\n            color=cs[\"input_text\"],\r\n            font_name=\"fonts/VT323-Regular.ttf\",\r\n            valign=\"middle\"\r\n        )\r\n        fs_label.bind(size=lambda inst, val: setattr(inst, 'text_size', (val[0], val[1])))\r\n        self.fs_slider = Slider(min=18, max=72, value=self.translator.english_input.font_size if self.translator.english_input.font_size >= 18 else 32, size_hint=(0.6, 1))\r\n        self.fs_slider.bind(value=self.on_font_size_change)\r\n        fs_row.add_widget(fs_label)\r\n        fs_row.add_widget(self.fs_slider)\r\n        content.add_widget(fs_row)\r\n        # Theme Row (renamed from View Mode)\r\n        theme_row = BoxLayout(orientation=\"horizontal\", size_hint=(1, None), height=dp(48), spacing=dp(10))\r\n        theme_label = Label(\r\n            text=\"Theme:\",\r\n            size_hint=(0.4, 1),\r\n            font_size=dp(28),\r\n            color=cs[\"input_text\"],\r\n            font_name=\"fonts/VT323-Regular.ttf\",\r\n            valign=\"middle\"\r\n        )\r\n        theme_label.bind(size=lambda inst, val: setattr(inst, 'text_size', (val[0], val[1])))\r\n        self.vm_dropdown = DropDown()\r\n        self.vm_btn = Button(\r\n            text=self.translator.view_mode,\r\n            size_hint=(0.6, 1),\r\n            background_color=cs[\"icon_normal\"],\r\n            background_normal=\"\",\r\n            color=get_contrasting_color(cs[\"icon_normal\"]),\r\n            font_name=\"fonts/VT323-Regular.ttf\",\r\n            font_size=dp(24)\r\n        )\r\n        self.vm_btn.bind(on_release=self.vm_dropdown.open)\r\n        for mode in [\"Rebel\", \"Imperial\", \"Light Side\", \"Dark Side\", \"Bounty Hunter\"]:\r\n            btn = Button(\r\n                text=mode,\r\n                size_hint_y=None,\r\n                height=dp(48),\r\n                background_color=cs[\"icon_normal\"],\r\n                background_normal=\"\",\r\n                color=get_contrasting_color(cs[\"icon_normal\"]),\r\n                font_name=\"fonts/VT323-Regular.ttf\",\r\n                font_size=dp(24)\r\n            )\r\n            btn.bind(on_release=lambda btn, mode=mode: self.select_view_mode(mode))\r\n            self.vm_dropdown.add_widget(btn)\r\n        theme_row.add_widget(theme_label)\r\n        theme_row.add_widget(self.vm_btn)\r\n        content.add_widget(theme_row)\r\n        # Apply Row – New: Immediately apply the changes.\r\n        apply_row = BoxLayout(orientation=\"horizontal\", size_hint=(1, None), height=dp(48), spacing=dp(10))\r\n        apply_btn = MainIconButton(\r\n            text=\"Apply\",\r\n            font_size=dp(24),\r\n            normal_color=cs[\"icon_normal\"],\r\n            active_color=cs[\"icon_active\"],\r\n            font_name=\"fonts/VT323-Regular.ttf\",\r\n            size_hint=(1, 1)\r\n        )\r\n        apply_btn.bind(on_release=lambda x: self.apply_theme())\r\n        apply_row.add_widget(apply_btn)\r\n        content.add_widget(apply_row)\r\n        # Reset Defaults Row\r\n        reset_row = BoxLayout(orientation=\"horizontal\", size_hint=(1, None), height=dp(48), spacing=dp(10))\r\n        reset_btn = MainIconButton(\r\n            text=\"Reset Defaults\",\r\n            font_size=dp(24),\r\n            normal_color=cs[\"icon_normal\"],\r\n            active_color=cs[\"icon_active\"],\r\n            font_name=\"fonts/VT323-Regular.ttf\",\r\n            size_hint=(1, 1)\r\n        )\r\n        reset_btn.bind(on_release=self.reset_defaults)\r\n        reset_row.add_widget(reset_btn)\r\n        content.add_widget(reset_row)\r\n        # About Row\r\n        about_row = BoxLayout(orientation=\"horizontal\", size_hint=(1, None), height=dp(48), spacing=dp(10))\r\n        about_btn = MainIconButton(\r\n            text=\"About\",\r\n            font_size=dp(24),\r\n            normal_color=cs[\"icon_normal\"],\r\n            active_color=cs[\"icon_active\"],\r\n            font_name=\"fonts/VT323-Regular.ttf\",\r\n            size_hint=(1, 1)\r\n        )\r\n        about_btn.bind(on_release=lambda x: self.open_about())\r\n        about_row.add_widget(about_btn)\r\n        content.add_widget(about_row)\r\n        self.content_area.add_widget(content)\r\n\r\n    def on_font_size_change(self, instance, value):\r\n        new_size = int(value)\r\n        self.translator.english_input.font_size = new_size\r\n        self.translator.aurebesh_input.font_size = new_size\r\n\r\n    def select_view_mode(self, mode):\r\n        self.vm_btn.text = mode\r\n        self.translator.view_mode = mode\r\n        self.translator.colors = VIEW_MODES[mode]\r\n        self.vm_dropdown.dismiss()\r\n\r\n    def reset_defaults(self, instance):\r\n        default_font_size = 32\r\n        self.fs_slider.value = default_font_size\r\n        self.translator.english_input.font_size = default_font_size\r\n        self.translator.aurebesh_input.font_size = default_font_size\r\n        self.translator.view_mode = \"Rebel\"\r\n        self.translator.colors = VIEW_MODES[\"Rebel\"]\r\n        self.vm_btn.text = \"Rebel\"\r\n\r\n    def open_about(self):\r\n        about = AboutPopup(translator_widget=self.translator)\r\n        about.open()\r\n\r\n    def apply_theme(self):\r\n        self.translator.apply_theme()\r\n        self.dismiss()\r\n\r\n# -----------------------------\r\n# Flash‐Card Tier Definitions\r\n# -----------------------------\r\nTIERS = {\r\n    # Tier 1 is single letters + digraph ligatures\r\n    1: [chr(c) for c in range(ord('a'), ord('z')+1)] + list(ligatures.keys()),\r\n    # Tier 2 might be simple words (you can flesh this out later)\r\n    2: [\r\n  \"lightsaber\", \"blaster\", \"bowcaster\", \"thermal detonator\", \"ion cannon\",\r\n  \"disruptor\", \"electrostaff\", \"force pike\", \"comlink\", \"datapad\",\r\n\r\n  \"x-wing\", \"tie fighter\", \"millennium falcon\", \"star destroyer\", \"tie advanced\",\r\n  \"snowspeeder\", \"podracer\", \"slave i\", \"speeder bike\", \"imperial shuttle\",\r\n\r\n  \"luke\", \"leia\", \"han\", \"chewbacca\", \"yoda\",\r\n  \"obi wan\", \"anakin\", \"vader\", \"palpatine\", \"lando\",\r\n\r\n  \"wookiee\", \"ewok\", \"rodian\", \"twi'lek\", \"zabrak\",\r\n  \"mon calamari\", \"duros\", \"bothan\", \"kashyyykian\", \"jawa\",\r\n\r\n  \"tatooine\", \"coruscant\", \"naboo\", \"hoth\", \"endor\",\r\n  \"kamino\", \"geonosis\", \"mustafar\", \"dagobah\", \"kashyyyk\",\r\n\r\n  \"rebel alliance\", \"galactic empire\", \"first order\", \"resistance\", \"jedi order\",\r\n  \"sith order\", \"bounty hunters\", \"clone troopers\", \"stormtroopers\", \"droids\",\r\n\r\n  \"death star\", \"jabbas palace\", \"cloud city\", \"mos eisley\", \"mos espas\",\r\n  \"jundland wastes\", \"ootini\", \"yavin 4\", \"theed palace\", \"hanging gardens\",\r\n\r\n  \"hyperspace\", \"blue squadron\", \"gold squadron\", \"rogue squadron\", \"force sensitive\",\r\n  \"holocron\", \"midichlorian\", \"lightspeed\", \"hyperdrive\", \"cantina\",\r\n\r\n  \"padawan\", \"jedi master\", \"jedi knight\", \"sith lord\", \"grand moff\",\r\n  \"moff\", \"admiral\", \"general\", \"commander\", \"captain\",\r\n\r\n  \"u-wing\", \"a-wing\", \"b-wing\", \"tie interceptor\", \"tie bomber\",\r\n  \"starfighter\", \"cr90 corvette\", \"venator class star destroyer\", \"mon cal amphibious cruiser\", \"droid control ship\"\r\n]\r\n,\r\n    # Tier 3 is your full preset phrases\r\n    3: preset_phrases\r\n}\r\n\r\n\r\n# -----------------------------\r\n# Games Popup\r\n# -----------------------------\r\nclass GameSelectionPopup(ModalView):\r\n    def __init__(self, translator_widget, **kwargs):\r\n        super().__init__(size_hint=(0.8, 0.6), **kwargs)\r\n        self.translator = translator_widget\r\n        self.auto_dismiss = False   # force use of close button\r\n\r\n        # 1) Outer vertical layout fills the popup\r\n        layout = BoxLayout(\r\n            orientation=\"vertical\",\r\n            spacing=dp(10),\r\n            padding=[dp(10)] * 4\r\n        )\r\n\r\n        # 2) Spacer pushes everything else *up*\r\n        layout.add_widget(Widget(size_hint_y=1))\r\n\r\n        # 3) Game buttons (added bottom→top order)\r\n        btn_search = Button(text=\"Word Search\", size_hint_y=None, height=dp(48))\r\n        btn_search.bind(on_release=lambda *_: (self.translator.open_word_search(), self.dismiss()))\r\n        layout.add_widget(btn_search)\r\n\r\n        btn_flash = Button(text=\"Flash-Cards\", size_hint_y=None, height=dp(48))\r\n        btn_flash.bind(on_release=lambda *_: (self.translator.open_flashcards(), self.dismiss()))\r\n        layout.add_widget(btn_flash)\r\n\r\n        # 4) Header with Close icon goes *last*, so it appears at the top\r\n        header = BoxLayout(orientation=\"horizontal\", size_hint_y=None, height=dp(48))\r\n        header.add_widget(Widget())  # pushes close-button right\r\n        close_btn = MainIconButton(\r\n            text=\"\\uf057\",  # FontAwesome “X” icon\r\n            font_size=dp(24),\r\n            normal_color=self.translator.colors[\"icon_normal\"],\r\n            active_color=self.translator.colors[\"icon_active\"],\r\n            font_name=\"fonts/icon-font.ttf\",\r\n            size_hint=(None, None),\r\n            size=(dp(48), dp(48))\r\n        )\r\n        close_btn.bind(on_release=lambda *_: self.dismiss())\r\n        header.add_widget(close_btn)\r\n        layout.add_widget(header)\r\n\r\n        # 5) Finally, add this fully-built layout to the popup\r\n        self.add_widget(layout)\r\n\r\n# -----------------------------\r\n# Flash-Card Quiz Popup\r\n# -----------------------------\r\nimport random\r\nfrom kivy.clock import Clock\r\nfrom kivy.uix.gridlayout import GridLayout\r\n\r\nclass FlashCardPopup(ModalView):\r\n    def __init__(self, translator_widget, **kwargs):\r\n        super().__init__(size_hint=(0.9, 0.9), **kwargs)\r\n        self.translator = translator_widget\r\n        self.auto_dismiss = False\r\n\r\n        # 1) Tier state (don’t load cards yet)\r\n        self.current_tier   = 1\r\n        self.unlocked_tiers = {1}\r\n\r\n        # 2) Build the UI\r\n        self.layout = BoxLayout(orientation=\"vertical\", padding=dp(20), spacing=dp(10))\r\n        \r\n        # Score label (will be updated by next_card)\r\n        self.score_lbl = Label(text=\"\", size_hint_y=None, height=dp(30), color=(1, 1, 1, 1))\r\n        self.layout.add_widget(self.score_lbl)\r\n\r\n        # Progress bar\r\n        self.progress = ProgressBar(max=1, value=0, size_hint_y=None, height=dp(80))\r\n        self.layout.add_widget(self.progress)\r\n\r\n        # Prompt (Aurebesh glyph)\r\n        self.prompt = Label(\r\n            font_name=\"Aurebesh-ImpRemnant.otf\",\r\n            font_size=dp(32),\r\n            halign=\"center\",\r\n            valign=\"middle\",\r\n            size_hint_y=None,\r\n            height=dp(100)\r\n        )\r\n        self.prompt.text_size = (self.prompt.width, None)\r\n        self.prompt.bind(\r\n            width=lambda inst, w: setattr(inst, 'text_size', (w, None))\r\n        )\r\n\r\n        self.layout.add_widget(self.prompt)\r\n\r\n        # Load sounds\r\n        self.sound_correct = SoundLoader.load('sound/ding.mp3')\r\n        self.sound_wrong   = SoundLoader.load('sound/buzz.mp3')\r\n\r\n        # Answer buttons grid\r\n        btn_grid = GridLayout(cols=2, spacing=dp(10), size_hint_y=None, height=dp(200))\r\n        self.answer_btns = []\r\n        for _ in range(4):\r\n            b = Button(\r\n                font_size=dp(20),\r\n                size_hint=(1, None),\r\n                height=dp(48),\r\n                background_normal='',\r\n                background_down='',\r\n                background_disabled_normal='',\r\n                background_disabled_down='',\r\n                background_color=self.translator.colors[\"container\"],\r\n                color=(1,1,1,1),\r\n                disabled_color=(1,1,1,1),\r\n                halign='center',\r\n                valign='middle',\r\n                text_size=(0, None)\r\n            )\r\n            b.bind(on_release=self.check_answer)\r\n            self.answer_btns.append(b)\r\n            btn_grid.add_widget(b)\r\n\r\n            # enable text wrapping at the button’s current width\r\n            b.text_size = (b.width, None)\r\n            b.halign    = 'center'\r\n            b.valign    = 'middle'\r\n            b.bind(width=lambda inst, w: setattr(inst, 'text_size', (w, None)))\r\n\r\n            # 1) Make the text wrap at the button’s width minus padding\r\n            b.bind(width=lambda inst, w: setattr(inst, 'text_size', (w - dp(20), None)))\r\n\r\n            # 2) Auto‐grow the height based on wrapped text size\r\n            b.bind(texture_size=lambda inst, ts: setattr(inst, 'height', ts[1] + dp(20)))\r\n        \r\n        self.layout.add_widget(btn_grid)\r\n\r\n        # Close button\r\n        close = Button(text=\"Close\", size_hint_y=None, height=dp(48))\r\n        close.bind(on_release=lambda *_: self.dismiss())\r\n        self.layout.add_widget(close)\r\n\r\n        # Attach the layout\r\n        self.add_widget(self.layout)\r\n\r\n        # 3) Now that all widgets exist, load the first deck\r\n        self.load_tier(self.current_tier)\r\n\r\n    def load_tier(self, tier):\r\n        # 1) Build & shuffle the new deck\r\n        pool = TIERS[tier].copy()\r\n        random.shuffle(pool)\r\n        self.cards = pool\r\n\r\n        # 2) Reset indices and score\r\n        self.index = 0\r\n        self.score = 0\r\n\r\n        # 3) Reset progress bar to match deck size\r\n        self.progress.max = len(self.cards)\r\n        self.progress.value = 0\r\n\r\n        # 4) Display the first card in the already‐built UI\r\n        self.next_card()\r\n\r\n    def next_card(self):\r\n        # ——— 1) End-of-deck? show pass/fail + buttons ———\r\n        if self.index >= len(self.cards):\r\n            total = len(self.cards)\r\n            pct   = self.score / total\r\n            passed = pct >= 0.7\r\n            status = \"DIRECTIVE PASSED\" if passed else \"DIRECTIVE FAILED\"\r\n\r\n            # Hide the small score label and progress bar\r\n            self.score_lbl.opacity = 0\r\n            self.progress.opacity  = 0\r\n\r\n            # Use the prompt label for a big summary\r\n            self.prompt.font_name = \"fonts/VT323-Regular.ttf\"\r\n            self.prompt.font_size = dp(26)\r\n            self.prompt.text = f\"SCORE: {self.score}/{total}\\n{status}\"\r\n\r\n            aus_status = english_to_aurebesh(status.lower())\r\n\r\n            # cleanup old buttons\r\n            for w in getattr(self, 'end_buttons', []):\r\n                try: self.layout.remove_widget(w)\r\n                except: pass\r\n            self.end_buttons = []            \r\n\r\n            # compute pass/fail\r\n            total = len(self.cards)\r\n            status = \"DIRECTIVE PASSED\" if passed else \"DIRECTIVE FAILED\"\r\n            pct    = self.score / len(self.cards)\r\n            passed = pct >= 0.7\r\n\r\n            # display definitive system report\r\n            self.score_lbl.color = (0,1,0,1) if passed else (1,0,0,1)\r\n            self.score_lbl.text  = f\"Score: {self.score}/{total}   {status}\"\r\n\r\n            # Restart button\r\n            restart = Button(\r\n                text=\"Restart\",\r\n                size_hint_y=None, height=dp(48),\r\n                background_normal='',\r\n                background_color=self.translator.colors[\"accent\"],\r\n                color=get_contrasting_color(self.translator.colors[\"accent\"])\r\n            )\r\n            restart.bind(on_release=self.restart_quiz)\r\n            self.layout.add_widget(restart)\r\n            self.end_buttons.append(restart)\r\n\r\n            # Continue button\r\n            next_tier = self.current_tier + 1\r\n            # if they passed, unlock & persist the new tier\r\n            if passed and next_tier in TIERS:\r\n                self.translator.unlocked_tiers.add(next_tier)\r\n                save_unlocked_tiers(self.translator.unlocked_tiers)\r\n            if next_tier in TIERS:\r\n                cont_text = f\"Continue to Tier {next_tier}\"\r\n            else:\r\n                cont_text = \"Restart or Close\"\r\n\r\n            cont = Button(\r\n                text=cont_text,\r\n                size_hint_y=None, height=dp(48),\r\n                background_normal='',\r\n                background_color=self.translator.colors[\"accent\"],\r\n                color=get_contrasting_color(self.translator.colors[\"accent\"])\r\n            )\r\n            cont.bind(on_release=self.continue_quiz)\r\n            self.layout.add_widget(cont)\r\n            self.end_buttons.append(cont)\r\n\r\n            return\r\n\r\n        # ——— 2) Otherwise, show the next card as normal ———\r\n        # live score in white\r\n        self.score_lbl.color = (1,1,1,1)\r\n        self.score_lbl.text  = f\"{self.score} / {len(self.cards)}\"\r\n        self.progress.value  = self.index\r\n\r\n        eng = self.cards[self.index]\r\n        self.prompt.text = english_to_aurebesh(eng)\r\n\r\n        # pick & display four choices\r\n        others = [o for o in self.cards if o != eng]\r\n        choices = random.sample(others, 3) + [eng]\r\n        random.shuffle(choices)\r\n        for btn, text in zip(self.answer_btns, choices):\r\n            btn.text             = text\r\n            btn.background_color = self.translator.colors[\"container\"]\r\n            btn.color            = (1,1,1,1)\r\n            btn.disabled         = False\r\n            btn.opacity          = 1\r\n\r\n\r\n    def check_answer(self, btn):\r\n        correct = self.cards[self.index]\r\n        container = self.translator.colors[\"container\"]\r\n        label_col = self.translator.colors[\"label\"]\r\n        green = (0, 1, 0, 1)\r\n        red   = (1, 0, 0, 1)\r\n        white = (1, 1, 1, 1)\r\n\r\n        if btn.text == correct:\r\n            self.sound_correct.play()\r\n            Animation(\r\n                background_color=green,\r\n                color=white,\r\n                duration=0.2\r\n            ).start(btn)\r\n            self.score += 1\r\n        else:\r\n            self.sound_wrong.play()\r\n            Animation(\r\n                background_color=red,\r\n                color=white,\r\n                duration=0.2\r\n            ).start(btn)\r\n            # highlight correct\r\n            for b2 in self.answer_btns:\r\n                if b2.text == correct:\r\n                    Animation(\r\n                        background_color=green,\r\n                        color=white,\r\n                        duration=0.3\r\n                    ).start(b2)\r\n\r\n        # disable & advance\r\n        for b2 in self.answer_btns:\r\n            b2.disabled = True\r\n        self.index += 1\r\n        Clock.schedule_once(lambda dt: self.next_card(), 0.6)\r\n\r\n    def restart_quiz(self, *args):\r\n        # restore prompt style\r\n        self.prompt.font_name = \"Aurebesh-ImpRemnant.otf\"\r\n        self.prompt.font_size = dp(32)\r\n        # make the in‐quiz widgets visible again\r\n        self.score_lbl.opacity = 1\r\n        self.progress.opacity  = 1\r\n        # 1) Remove both end‐of‐deck buttons\r\n        for w in getattr(self, 'end_buttons', []):\r\n            try:    self.layout.remove_widget(w)\r\n            except: pass\r\n        self.end_buttons = []\r\n\r\n        # 2) Reset score label to default color & text\r\n        self.score_lbl.color = self.translator.colors[\"label\"]\r\n        self.score_lbl.text  = \"\"\r\n\r\n        # 3) Restore and show answer buttons\r\n        for b in self.answer_btns:\r\n            b.disabled = False\r\n            b.opacity  = 1\r\n            # reset their theme colors too\r\n            b.background_color = self.translator.colors[\"container\"]\r\n            b.color            = self.translator.colors[\"label\"]\r\n\r\n        # 4) Reset progress bar\r\n        self.progress.value = 0\r\n\r\n        # 5) Reload the deck & show first card\r\n        self.load_tier(self.current_tier)\r\n\r\n    def continue_quiz(self, *args):\r\n        # restore prompt style\r\n        self.prompt.font_name = \"Aurebesh-ImpRemnant.otf\"\r\n        self.prompt.font_size = dp(32)\r\n        # make the in‐quiz widgets visible again\r\n        self.score_lbl.opacity = 1\r\n        self.progress.opacity  = 1\r\n\r\n        # 1) Remove both end‐of‐deck buttons\r\n        for w in getattr(self, 'end_buttons', []):\r\n            try:    self.layout.remove_widget(w)\r\n            except: pass\r\n        self.end_buttons = []\r\n\r\n        # 2) Restore answer buttons\r\n        for b in self.answer_btns:\r\n            b.disabled         = False\r\n            b.opacity          = 1\r\n            b.background_color = self.translator.colors[\"container\"]\r\n            b.color            = (1, 1, 1, 1)\r\n\r\n        # 3) Advance to next tier if available\r\n        next_tier = self.current_tier + 1\r\n        if next_tier in TIERS:\r\n            self.current_tier = next_tier\r\n\r\n        # 4) Load that tier’s deck\r\n        self.load_tier(self.current_tier)\r\n\r\nfrom kivy.uix.modalview import ModalView\r\nfrom kivy.uix.boxlayout  import BoxLayout\r\nfrom kivy.uix.button     import Button\r\nfrom kivy.metrics         import dp\r\n\r\nclass WordSearchPopup(ModalView):\r\n    def __init__(self, words, grid_size=12, **kwargs):\r\n        super().__init__(**kwargs)\r\n        self.size_hint = (0.9, 0.9)\r\n        self.words = [w.upper() for w in words]\r\n        self.grid_size = grid_size\r\n        self.grid, self.placed = generate_word_search(self.words, grid_size)\r\n        self.selected = []\r\n\r\n        # Build a single layout up front\r\n        layout = BoxLayout(orientation='vertical', spacing=dp(8), padding=dp(8))\r\n\r\n        # 1) Instruction icon (opens small popup)\r\n        from kivy.uix.anchorlayout import AnchorLayout\r\n        header = AnchorLayout(anchor_x='right', anchor_y='center',\r\n                               size_hint_y=None, height=dp(40))\r\n        instr_btn = Button(\r\n            text='?', size_hint=(None,None), size=(dp(30), dp(30)),\r\n            background_normal='', background_color=(0.9,0.9,0.5,1)\r\n        )\r\n        instr_btn.bind(on_release=self.show_instructions)\r\n        header.add_widget(instr_btn)\r\n        layout.add_widget(header)\r\n\r\n        # 2) Grid of Aurebesh letters\r\n        grid_layout = GridLayout(cols=grid_size, rows=grid_size, spacing=1)\r\n        for y in range(grid_size):\r\n            for x in range(grid_size):\r\n                letter = self.grid[y][x]\r\n                btn = Button(\r\n                    text=letter,\r\n                    font_name=\"Aurebesh-ImpRemnant.otf\",\r\n                    font_size=dp(24),\r\n                    background_color=(0,0,0,0),\r\n                    color=(1,1,1,1),\r\n                )\r\n                btn.bind(on_release=lambda btn, x=x, y=y: self.on_cell_tap((x,y), btn))\r\n                grid_layout.add_widget(btn)\r\n        layout.add_widget(grid_layout)\r\n\r\n        # 3) Clear-selection button\r\n        clear_btn = Button(text=\"Clear Selection\", size_hint_y=None, height=dp(30))\r\n        clear_btn.bind(on_release=lambda *a: self.clear_selection())\r\n        layout.add_widget(clear_btn)\r\n\r\n        # 4) English word list\r\n        word_list = Label(\r\n            text=\"Find: \" + \", \".join(self.words),\r\n            size_hint_y=None, height=dp(40)\r\n        )\r\n        layout.add_widget(word_list)\r\n\r\n        # 5) Close button\r\n        close = Button(text=\"Close\", size_hint_y=None, height=dp(48))\r\n        close.bind(on_release=lambda *a: self.dismiss())\r\n        layout.add_widget(close)\r\n\r\n        # 6) Attach everything\r\n        self.add_widget(layout)\r\n\r\n    def on_cell_tap(self, pos, btn):\r\n        # clear any prior “first-tap” highlight\r\n        if len(self.selected) == 1:\r\n            prev_btn = self.selected[0][1]\r\n            prev_btn.background_color = (1,1,1,1)\r\n\r\n        # record & highlight this tap\r\n        self.selected.append((pos, btn))\r\n        btn.background_color = (1,1,0,1)  # yellow for “this is tapped”\r\n        \r\n        # update our “Selected:” label\r\n        coords = [p for p,_ in self.selected]\r\n        letters = [self.grid[y][x] for x,y in coords]\r\n        self.selected_label.text = f\"Selected: {' – '.join(letters)}\"\r\n\r\n        # once we have two taps, check correctness\r\n        if len(self.selected) == 2:\r\n            (x1,y1), btn1 = self.selected[0]\r\n            (x2,y2), btn2 = self.selected[1]\r\n            matched = False\r\n            for word, coords in self.placed:\r\n                if (coords[0] == (x1,y1) and coords[-1] == (x2,y2)) or \\\r\n                   (coords[-1] == (x1,y1) and coords[0] == (x2,y2)):\r\n                    matched = True\r\n                    # highlight the entire found word in green\r\n                    for cx, cy in coords:\r\n                        idx = cy * self.grid_size + cx\r\n                        cell = grid_layout.children[self.grid_size*self.grid_size - 1 - idx]\r\n                        cell.background_color = (0.7,1,0.7,1)\r\n                    break\r\n\r\n            # mark wrong taps in red\r\n            wrong_buttons = [b for _, b in self.selected]\r\n            for b in wrong_buttons:\r\n                b.background_color = (1,0.7,0.7,1)\r\n            # after 0.5s, reset them back to white\r\n            Clock.schedule_once(\r\n                lambda dt, btns=wrong_buttons: [setattr(btn, 'background_color', (1,1,1,1)) for btn in btns],\r\n                0.5\r\n            )\r\n\r\n            # reset selection state\r\n            self.selected = []\r\n            self.selected_label.text = \"Selected:   \"\r\n    \r\n    def clear_selection(self):\r\n        # reset any highlighted cells and clear state\r\n        for _, btn in self.selected:\r\n            btn.background_color = (1,1,1,1)\r\n        self.selected = []\r\n\r\n    def show_instructions(self, *args):\r\n        from kivy.uix.modalview import ModalView\r\n        help_popup = ModalView(size_hint=(0.6, 0.4))\r\n        msg = Label(\r\n            text=\"How to play:\\nTap the first and last letter of an English word to select it.\",\r\n            halign=\"center\", valign=\"middle\"\r\n        )\r\n        msg.text_size = (help_popup.width * 0.9, None)\r\n        help_popup.add_widget(msg)\r\n        help_popup.open()    \r\n\r\n        self.selected.append((pos, btn))\r\n        if len(self.selected) == 2:\r\n            (x1,y1), _ = self.selected[0]\r\n            (x2,y2), _ = self.selected[1]\r\n            # check if these coords match any placed word\r\n            for word, coords in self.placed:\r\n                if coords[0] == (x1,y1) and coords[-1] == (x2,y2) or \\\r\n                   coords[-1] == (x1,y1) and coords[0] == (x2,y2):\r\n                    # highlight all letters\r\n                    for cx, cy in coords:\r\n                        index = cy * self.grid_size + cx\r\n                        cell = self.children[0].children[2].children[self.grid_size*self.grid_size-1 - index]\r\n                        cell.background_color = (0.7,1,0.7,1)\r\n                    break\r\n            self.selected = []\r\n\r\nclass TierSelectPopup(ModalView):\r\n    def __init__(self, translator_widget, tiers, **kwargs):\r\n        super().__init__(size_hint=(0.6, 0.4), **kwargs)\r\n        self.translator = translator_widget\r\n        layout = BoxLayout(orientation=\"vertical\", spacing=dp(10), padding=dp(20))\r\n        for t in tiers:\r\n            btn = Button(text=f\"Tier {t}\", size_hint_y=None, height=dp(48))\r\n            btn.bind(on_release=lambda _, tier=t: self.start_tier(tier))\r\n            layout.add_widget(btn)\r\n        self.add_widget(layout)\r\n\r\n    def start_tier(self, tier):\r\n        popup = FlashCardPopup(translator_widget=self.translator)\r\n        popup.current_tier   = tier\r\n        popup.unlocked_tiers = self.translator.unlocked_tiers\r\n        popup.load_tier(tier)\r\n        popup.open()\r\n        self.dismiss()\r\n\r\n# -----------------------------\r\n# Main Translator Widget\r\n# -----------------------------\r\nclass TranslatorWidget(BoxLayout):\r\n    def __init__(self, **kwargs):\r\n        super().__init__(**kwargs)\r\n        # load the set of unlocked tiers (persists across runs)\r\n        self.unlocked_tiers = load_unlocked_tiers()\r\n        self.orientation = \"vertical\"\r\n        self.padding = [dp(10)] * 4\r\n        self.spacing = dp(10)\r\n\r\n        # Theme & header\r\n        self.view_mode = \"Rebel\"\r\n        self.colors = VIEW_MODES[self.view_mode]\r\n        Window.clearcolor = self.colors[\"bg\"]\r\n\r\n        from kivy.uix.anchorlayout import AnchorLayout\r\n\r\n        header = AnchorLayout(\r\n            anchor_x=\"right\",  # push children to the right edge\r\n            anchor_y=\"center\", # vertically centered\r\n            size_hint_y=None,\r\n            height=dp(48),\r\n        )\r\n\r\n        header = BoxLayout(\r\n            orientation=\"horizontal\",\r\n            spacing=dp(10),\r\n            size_hint_y=None,\r\n            height=dp(48),\r\n        )\r\n\r\n        header.add_widget(Widget(size_hint_x=1))\r\n\r\n        self.learn_btn = MainIconButton(\r\n            text=\"\\uf11b\",\r\n            font_size=dp(24),\r\n            normal_color=self.colors[\"icon_normal\"],\r\n            active_color=self.colors[\"icon_active\"],\r\n            font_name=\"fonts/icon-font.ttf\",\r\n            size_hint=(None, None),\r\n            size=(dp(48), dp(48))\r\n        )\r\n\r\n        self.learn_btn.bind(on_release=lambda _: self.open_learning())\r\n        header.add_widget(self.learn_btn)\r\n\r\n        self.gear_btn = MainIconButton(\r\n            text=\"\\uf013\",\r\n            font_size=dp(24),\r\n            normal_color=self.colors[\"icon_normal\"],\r\n            active_color=self.colors[\"icon_active\"],\r\n            font_name=\"fonts/icon-font.ttf\",\r\n            size_hint=(None, None),\r\n            size=(dp(48), dp(48))\r\n)\r\n        self.gear_btn.bind(on_release=lambda _: self.open_settings())\r\n        header.add_widget(self.gear_btn)\r\n        self.add_widget(header)\r\n\r\n        # English input\r\n        self.english_input = TextInput(\r\n            hint_text=\"English Input\", multiline=True,\r\n            font_size=dp(18), font_name=\"fonts/VT323-Regular.ttf\",\r\n            size_hint_y=0.15,\r\n            background_color=self.colors[\"container\"],\r\n            foreground_color=self.colors[\"input_text\"],\r\n            padding=[dp(10)]*4\r\n        )\r\n        self.english_input.bind(focus=lambda inst, val: update_border(inst, val))\r\n        self.english_input.bind(text=self.on_english_text)\r\n        self.add_widget(self.english_input)\r\n\r\n        # Aurebesh input\r\n        self.aurebesh_input = TextInput(\r\n            hint_text=\"Aurebesh Translation\", multiline=True,\r\n            font_size=dp(18), font_name=\"Aurebesh-ImpRemnant.otf\",\r\n            size_hint_y=0.15,\r\n            background_color=self.colors[\"container\"],\r\n            foreground_color=self.colors[\"input_text\"],\r\n            padding=[dp(10)]*4\r\n        )\r\n        self.aurebesh_input.bind(focus=lambda inst, val: update_border(inst, val))\r\n        self.aurebesh_input.bind(text=self.on_aurebesh_text)\r\n        self.aurebesh_input.input_type = 'null'  # disable system keyboard\r\n        self.add_widget(self.aurebesh_input)\r\n\r\n        # Action bar\r\n        self.bottom_bar = BoxLayout(\r\n            orientation=\"horizontal\",\r\n            size_hint_y=None,\r\n            height=dp(48),\r\n            spacing=dp(10)\r\n        )\r\n        for icon, handler in [\r\n            (\"\\uf0c5\", self.copy_active_text),\r\n            (\"\\uf0ea\", self.paste_text),\r\n            (\"\\uf00d\", self.clear_texts),\r\n            (\"\\uf02e\", self.open_saved_popup),\r\n            (\"\\uf005\", self.save_current_phrase),\r\n            (\"\\uf1da\", self.open_history),\r\n        ]:\r\n            btn = MainIconButton(\r\n                text=icon,\r\n                font_size=dp(24),\r\n                normal_color=self.colors[\"icon_normal\"],\r\n                active_color=self.colors[\"icon_active\"],\r\n                font_name=\"fonts/icon-font.ttf\",\r\n                size_hint=(1, None),\r\n                height=dp(48), \r\n            )\r\n            btn.bind(on_release=lambda _, fn=handler: fn())\r\n            self.bottom_bar.add_widget(btn)\r\n        self.add_widget(self.bottom_bar)\r\n\r\n        # Custom Aurebesh keyboard\r\n        self.keyboard_overlay = CustomKeyboard(\r\n            input_target=self.aurebesh_input,\r\n            translator=self,\r\n            size_hint_y=None,\r\n            height=dp(200)\r\n        )\r\n        self.add_widget(self.keyboard_overlay)\r\n\r\n    # Translation callbacks\r\n    def on_english_text(self, instance, value):\r\n        translated = english_to_aurebesh(value)\r\n        self.aurebesh_input.unbind(text=self.on_aurebesh_text)\r\n        self.aurebesh_input.text = translated\r\n        self.aurebesh_input.bind(text=self.on_aurebesh_text)\r\n\r\n    def on_aurebesh_text(self, instance, value):\r\n        translated = aurebesh_to_english(value)\r\n        self.english_input.unbind(text=self.on_english_text)\r\n        self.english_input.text = translated\r\n        self.english_input.bind(text=self.on_english_text)\r\n\r\n    # Action handlers\r\n    def copy_active_text(self):\r\n        if self.english_input.focus:\r\n            Clipboard.copy(self.english_input.text)\r\n        elif self.aurebesh_input.focus:\r\n            Clipboard.copy(self.aurebesh_input.text)\r\n        else:\r\n            Clipboard.copy(self.english_input.text)\r\n\r\n    def paste_text(self):\r\n        pasted = Clipboard.paste()\r\n        # Decide target: whichever is focused, or default to English\r\n        if self.english_input.focus:\r\n            target = self.english_input\r\n        elif self.aurebesh_input.focus:\r\n            target = self.aurebesh_input\r\n        else:\r\n            target = self.english_input\r\n            target.focus = True\r\n\r\n        # Insert at current cursor position\r\n        cursor = target.cursor_index()\r\n        target.text = target.text[:cursor] + pasted + target.text[cursor:]\r\n        # Move cursor to end of pasted text\r\n        target.cursor = (cursor + len(pasted), 0)\r\n\r\n    def clear_texts(self):\r\n        self.english_input.text = \"\"\r\n        self.aurebesh_input.text = \"\"\r\n\r\n    def open_saved_popup(self):\r\n        popup = SavedPopup(translator_widget=self)\r\n        popup.open()\r\n\r\n    def save_current_phrase(self):\r\n        phrase = self.english_input.text.strip()\r\n        if phrase and phrase not in saved_phrases:\r\n            saved_phrases.append(phrase)\r\n            save_phrases_to_file(saved_phrases)\r\n\r\n    def open_history(self):\r\n        if self.english_input.text.strip():\r\n            add_history_entry(self.english_input.text, self.aurebesh_input.text)\r\n        popup = HistoryPopup(translator_widget=self)\r\n        popup.open()\r\n\r\n    def open_settings(self):\r\n        popup = SettingsPopup(translator_widget=self)\r\n        popup.open()\r\n\r\n    def open_learning(self):\r\n        popup = GameSelectionPopup(translator_widget=self)\r\n        popup.open()\r\n\r\n    def open_flashcards(self):\r\n        if len(self.unlocked_tiers) > 1:\r\n            popup = TierSelectPopup(translator_widget=self, tiers=sorted(self.unlocked_tiers))\r\n        else:\r\n            popup = FlashCardPopup(translator_widget=self)\r\n        popup.open()\r\n\r\n    def open_word_search(self):\r\n        print(\"🔍 open_word_search() called\")\r\n        words = [\"MAY\", \"THE\", \"FORCE\", \"BE\", \"WITH\", \"YOU\"]\r\n        WordSearchPopup(words=words, grid_size=12).open()\r\n\r\n        # Just open the popup; it builds its own layout now\r\n        words = [\"MAY\", \"THE\", \"FORCE\", \"BE\", \"WITH\", \"YOU\"]\r\n        WordSearchPopup(words=words, grid_size=12).open()\r\n\r\n    def apply_theme(self):\r\n        # Grab the freshly-selected colors\r\n        cs = self.colors\r\n        # Update the window background\r\n        Window.clearcolor = cs[\"bg\"]\r\n        # Update both text inputs\r\n        self.english_input.background_color = cs[\"container\"]\r\n        self.english_input.foreground_color = cs[\"input_text\"]\r\n        self.aurebesh_input.background_color = cs[\"container\"]\r\n        self.aurebesh_input.foreground_color = cs[\"input_text\"]\r\n        # Update your gear button\r\n        self.gear_btn.normal_color = cs[\"icon_normal\"]\r\n        self.gear_btn.active_color = cs[\"icon_active\"]\r\n        self.gear_btn.background_color = cs[\"icon_normal\"]\r\n        # update Learn/Game button\r\n        self.learn_btn.normal_color = cs[\"icon_normal\"]\r\n        self.learn_btn.active_color = cs[\"icon_active\"]\r\n        self.learn_btn.background_color = cs[\"icon_normal\"]\r\n        # Update the icon row buttons\r\n        for btn in self.bottom_bar.children:\r\n            btn.normal_color = cs[\"icon_normal\"]\r\n            btn.active_color = cs[\"icon_active\"]\r\n            btn.background_color = cs[\"icon_normal\"]\r\n# -----------------------------\r\n# Custom Keyboard\r\n# -----------------------------\r\n\r\nclass CustomKeyboard(GridLayout):\r\n    def __init__(self, input_target, translator=None, **kwargs):\r\n        super().__init__(**kwargs)\r\n        self.cols = 1                 # one row per BoxLayout\r\n        self.spacing = dp(4)\r\n        self.input_target = input_target\r\n        self.translator = translator\r\n        self.build_keyboard()\r\n\r\n    def build_keyboard(self):\r\n        rows = [\r\n            list(\"QWERTYUIOP\"),\r\n            list(\"ASDFGHJKL\"),\r\n            list(\"ZXCVBNM\"),\r\n            [\"SPACE\", \"BACK\", \"ENTER\"],\r\n            [\"CH\", \"SH\", \"TH\", \"NG\", \"AE\", \"EO\", \"KH\", \"OO\"],\r\n        ]\r\n        ligature_map = {\r\n            \"CH\": \"\\ue011\", \"SH\": \"\\ue016\", \"TH\": \"\\ue018\", \"NG\": \"\\ue014\",\r\n            \"AE\": \"\\ue010\", \"EO\": \"\\ue012\", \"KH\": \"\\ue013\", \"OO\": \"\\ue015\"\r\n        }\r\n\r\n        for row in rows:\r\n            row_layout = BoxLayout(\r\n                orientation=\"horizontal\",\r\n                size_hint_y=None,\r\n                height=dp(48),\r\n                spacing=dp(4),\r\n            )\r\n            for key in row:\r\n                btn = Button(\r\n                    text=key,\r\n                    font_size=dp(18),\r\n                    font_name=\"Aurebesh-ImpRemnant.otf\",\r\n                    background_color=(0, 0, 0, 0.7),\r\n                    color=(1, 0.631, 0.129, 1),\r\n                    size_hint=(1, 1),\r\n                )\r\n                btn.bind(on_release=self.on_key_press)\r\n                btn.key_value = ligature_map.get(key, key.upper())\r\n                row_layout.add_widget(btn)\r\n            self.add_widget(row_layout)\r\n\r\n    def on_key_press(self, button):\r\n        key = button.key_value\r\n        input_box = self.input_target\r\n        text = input_box.text\r\n        cursor = input_box.cursor_index()\r\n\r\n        # 1) Merge last char + new char into a ligature if possible\r\n        if len(key) == 1 and key.isalpha() and text:\r\n            duo = (text[-1] + key).lower()\r\n            if duo in ligatures:\r\n                glyph = ligatures[duo]\r\n                input_box.text = text[:-1] + glyph\r\n                input_box.cursor = (len(input_box.text), 0)\r\n                if self.translator:\r\n                    self.translator.on_aurebesh_text(input_box, input_box.text)\r\n                return\r\n\r\n        # 2) Handle SPACE, BACK, ENTER\r\n        if key == \"SPACE\":\r\n            key = \" \"\r\n        elif key == \"BACK\":\r\n            if cursor > 0:\r\n                input_box.text = text[:cursor-1] + text[cursor:]\r\n                input_box.cursor = (cursor-1, 0)\r\n            return\r\n        elif key == \"ENTER\":\r\n            key = \"\\n\"\r\n\r\n        # 3) Normal insert\r\n        input_box.text = text[:cursor] + key + text[cursor:]\r\n        new_index = cursor + len(key)\r\n        input_box.cursor = input_box.get_cursor_from_index(new_index)\r\n\r\n        # 4) Trigger English translation\r\n        if self.translator:\r\n            self.translator.on_aurebesh_text(input_box, input_box.text)\r\n\r\n# -----------------------------\r\n# The Kivy App\r\n# -----------------------------\r\nclass AurebeshTranslatorApp(App):\r\n    def build(self):\r\n        return TranslatorWidget()\r\n\r\nif __name__ == '__main__':\r\n    AurebeshTranslatorApp().run()\r\n","size_bytes":63677},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertHistoryEntrySchema, \n  insertSavedPhraseSchema,\n  insertGameProgressSchema,\n  insertSettingsSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // History routes\n  app.get(\"/api/history\", async (req, res) => {\n    try {\n      const history = await storage.getHistory();\n      res.json(history);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch history\" });\n    }\n  });\n\n  app.post(\"/api/history\", async (req, res) => {\n    try {\n      const entry = insertHistoryEntrySchema.parse(req.body);\n      const newEntry = await storage.addHistoryEntry(entry);\n      res.json(newEntry);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid history entry\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to add history entry\" });\n      }\n    }\n  });\n\n  app.patch(\"/api/history/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const updatedEntry = await storage.updateHistoryEntry(id, updates);\n      if (!updatedEntry) {\n        res.status(404).json({ error: \"History entry not found\" });\n      } else {\n        res.json(updatedEntry);\n      }\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update history entry\" });\n    }\n  });\n\n  app.delete(\"/api/history/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteHistoryEntry(id);\n      if (!deleted) {\n        res.status(404).json({ error: \"History entry not found\" });\n      } else {\n        res.json({ success: true });\n      }\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete history entry\" });\n    }\n  });\n\n  // Saved phrases routes\n  app.get(\"/api/saved-phrases\", async (req, res) => {\n    try {\n      const phrases = await storage.getSavedPhrases();\n      res.json(phrases);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch saved phrases\" });\n    }\n  });\n\n  app.post(\"/api/saved-phrases\", async (req, res) => {\n    try {\n      const phrase = insertSavedPhraseSchema.parse(req.body);\n      const newPhrase = await storage.addSavedPhrase(phrase);\n      res.json(newPhrase);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid saved phrase\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to add saved phrase\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/saved-phrases/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteSavedPhrase(id);\n      if (!deleted) {\n        res.status(404).json({ error: \"Saved phrase not found\" });\n      } else {\n        res.json({ success: true });\n      }\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete saved phrase\" });\n    }\n  });\n\n  // Game progress routes\n  app.get(\"/api/game-progress\", async (req, res) => {\n    try {\n      const progress = await storage.getGameProgress();\n      res.json(progress);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch game progress\" });\n    }\n  });\n\n  app.patch(\"/api/game-progress\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const updatedProgress = await storage.updateGameProgress(updates);\n      res.json(updatedProgress);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update game progress\" });\n    }\n  });\n\n  // Settings routes\n  app.get(\"/api/settings\", async (req, res) => {\n    try {\n      const settings = await storage.getSettings();\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.patch(\"/api/settings\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const updatedSettings = await storage.updateSettings(updates);\n      res.json(updatedSettings);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update settings\" });\n    }\n  });\n\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":4350},"server/storage.ts":{"content":"import { \n  type HistoryEntry, \n  type InsertHistoryEntry,\n  type SavedPhrase,\n  type InsertSavedPhrase,\n  type GameProgress,\n  type InsertGameProgress,\n  type Settings,\n  type InsertSettings\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // History\n  getHistory(): Promise<HistoryEntry[]>;\n  addHistoryEntry(entry: InsertHistoryEntry): Promise<HistoryEntry>;\n  updateHistoryEntry(id: string, updates: Partial<HistoryEntry>): Promise<HistoryEntry | undefined>;\n  deleteHistoryEntry(id: string): Promise<boolean>;\n  \n  // Saved Phrases\n  getSavedPhrases(): Promise<SavedPhrase[]>;\n  addSavedPhrase(phrase: InsertSavedPhrase): Promise<SavedPhrase>;\n  deleteSavedPhrase(id: string): Promise<boolean>;\n  \n  // Game Progress\n  getGameProgress(): Promise<GameProgress>;\n  updateGameProgress(updates: Partial<GameProgress>): Promise<GameProgress>;\n  \n  // Settings\n  getSettings(): Promise<Settings>;\n  updateSettings(updates: Partial<Settings>): Promise<Settings>;\n}\n\nexport class MemStorage implements IStorage {\n  private history: Map<string, HistoryEntry>;\n  private savedPhrases: Map<string, SavedPhrase>;\n  private gameProgress: GameProgress;\n  private settings: Settings;\n\n  constructor() {\n    this.history = new Map();\n    this.savedPhrases = new Map();\n    this.gameProgress = {\n      id: \"default\",\n      unlockedTiers: [1],\n      flashcardStats: {\n        tier1Score: 0,\n        tier2Score: 0,\n        tier3Score: 0,\n      }\n    };\n    this.settings = {\n      id: \"default\",\n      theme: \"Rebel\",\n      fontSize: 20,\n    };\n  }\n\n  async getHistory(): Promise<HistoryEntry[]> {\n    return Array.from(this.history.values()).sort((a, b) => \n      new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    );\n  }\n\n  async addHistoryEntry(entry: InsertHistoryEntry): Promise<HistoryEntry> {\n    const id = randomUUID();\n    const fullEntry: HistoryEntry = { ...entry, id };\n    this.history.set(id, fullEntry);\n    return fullEntry;\n  }\n\n  async updateHistoryEntry(id: string, updates: Partial<HistoryEntry>): Promise<HistoryEntry | undefined> {\n    const existing = this.history.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updates };\n    this.history.set(id, updated);\n    return updated;\n  }\n\n  async deleteHistoryEntry(id: string): Promise<boolean> {\n    return this.history.delete(id);\n  }\n\n  async getSavedPhrases(): Promise<SavedPhrase[]> {\n    return Array.from(this.savedPhrases.values()).sort((a, b) => \n      new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n    );\n  }\n\n  async addSavedPhrase(phrase: InsertSavedPhrase): Promise<SavedPhrase> {\n    const id = randomUUID();\n    const fullPhrase: SavedPhrase = { ...phrase, id };\n    this.savedPhrases.set(id, fullPhrase);\n    return fullPhrase;\n  }\n\n  async deleteSavedPhrase(id: string): Promise<boolean> {\n    return this.savedPhrases.delete(id);\n  }\n\n  async getGameProgress(): Promise<GameProgress> {\n    return this.gameProgress;\n  }\n\n  async updateGameProgress(updates: Partial<GameProgress>): Promise<GameProgress> {\n    this.gameProgress = { ...this.gameProgress, ...updates };\n    return this.gameProgress;\n  }\n\n  async getSettings(): Promise<Settings> {\n    return this.settings;\n  }\n\n  async updateSettings(updates: Partial<Settings>): Promise<Settings> {\n    this.settings = { ...this.settings, ...updates };\n    return this.settings;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":3474},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// Translation History Entry\nexport const historyEntrySchema = z.object({\n  id: z.string(),\n  english: z.string(),\n  aurebesh: z.string(),\n  favorite: z.boolean().default(false),\n  timestamp: z.string(), // ISO date string\n});\n\nexport const insertHistoryEntrySchema = historyEntrySchema.omit({ id: true });\n\nexport type HistoryEntry = z.infer<typeof historyEntrySchema>;\nexport type InsertHistoryEntry = z.infer<typeof insertHistoryEntrySchema>;\n\n// Saved Phrases\nexport const savedPhraseSchema = z.object({\n  id: z.string(),\n  phrase: z.string(),\n  timestamp: z.string(),\n});\n\nexport const insertSavedPhraseSchema = savedPhraseSchema.omit({ id: true });\n\nexport type SavedPhrase = z.infer<typeof savedPhraseSchema>;\nexport type InsertSavedPhrase = z.infer<typeof insertSavedPhraseSchema>;\n\n// Game Progress\nexport const gameProgressSchema = z.object({\n  id: z.string(),\n  unlockedTiers: z.array(z.number()).default([1]),\n  flashcardStats: z.object({\n    tier1Score: z.number().default(0),\n    tier2Score: z.number().default(0),\n    tier3Score: z.number().default(0),\n  }).default({}),\n});\n\nexport const insertGameProgressSchema = gameProgressSchema.omit({ id: true });\n\nexport type GameProgress = z.infer<typeof gameProgressSchema>;\nexport type InsertGameProgress = z.infer<typeof insertGameProgressSchema>;\n\n// Settings\nexport const settingsSchema = z.object({\n  id: z.string(),\n  theme: z.enum([\"Rebel\", \"Imperial\", \"Light Side\", \"Dark Side\", \"Bounty Hunter\"]).default(\"Rebel\"),\n  fontSize: z.number().min(16).max(32).default(20),\n});\n\nexport const insertSettingsSchema = settingsSchema.omit({ id: true });\n\nexport type Settings = z.infer<typeof settingsSchema>;\nexport type InsertSettings = z.infer<typeof insertSettingsSchema>;\n\n// OCR Request\nexport const ocrRequestSchema = z.object({\n  imageData: z.string(), // base64 encoded image\n});\n\nexport type OCRRequest = z.infer<typeof ocrRequestSchema>;\n","size_bytes":1931},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport TranslatorPage from \"@/pages/translator\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={TranslatorPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":839},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=VT323:wght@400&display=swap');\n\n/* Custom Fonts */\n@font-face {\n  font-family: 'Aurebesh';\n  src: url('/fonts/aurebesh.otf') format('opentype');\n  font-weight: normal;\n  font-style: normal;\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'VT323-Local';\n  src: url('/fonts/VT323-Regular.ttf') format('truetype');\n  font-weight: 400;\n  font-style: normal;\n  font-display: swap;\n}\n\n@font-face {\n  font-family: 'IconFont';\n  src: url('/fonts/icon-font.ttf') format('truetype');\n  font-weight: normal;\n  font-style: normal;\n  font-display: swap;\n}\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Rebel Theme - Default */\n  --background: hsl(45, 40%, 94%);\n  --foreground: hsl(210, 10%, 5%);\n  --card: hsl(200, 10%, 23%);\n  --card-foreground: hsl(45, 40%, 94%);\n  --popover: hsl(200, 10%, 23%);\n  --popover-foreground: hsl(45, 40%, 94%);\n  --primary: hsl(15, 75%, 58%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(200, 10%, 23%);\n  --secondary-foreground: hsl(45, 40%, 94%);\n  --muted: hsl(200, 10%, 23%);\n  --muted-foreground: hsl(45, 40%, 94%);\n  --accent: hsl(15, 85%, 50%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(200, 10%, 30%);\n  --input: hsl(200, 10%, 23%);\n  --ring: hsl(15, 75%, 58%);\n  --radius: 8px;\n  \n  /* Font families */\n  --font-sans: 'VT323-Local', 'VT323', monospace;\n  --font-serif: Georgia, serif;\n  --font-mono: 'VT323-Local', 'VT323', monospace;\n  --font-aurebesh: 'Aurebesh', 'Courier New', monospace;\n}\n\n/* Imperial Theme */\n.theme-imperial {\n  --background: hsl(200, 10%, 23%);\n  --foreground: hsl(0, 50%, 40%);\n  --card: hsl(210, 10%, 5%);\n  --card-foreground: hsl(45, 40%, 94%);\n  --popover: hsl(210, 10%, 5%);\n  --popover-foreground: hsl(45, 40%, 94%);\n  --primary: hsl(0, 50%, 40%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 10%, 5%);\n  --secondary-foreground: hsl(45, 40%, 94%);\n  --muted: hsl(210, 10%, 5%);\n  --muted-foreground: hsl(45, 40%, 94%);\n  --accent: hsl(0, 70%, 55%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 50%, 30%);\n  --input: hsl(210, 10%, 5%);\n  --ring: hsl(0, 70%, 55%);\n}\n\n/* Light Side Theme */\n.theme-light {\n  --background: hsl(35, 20%, 65%);\n  --foreground: hsl(205, 100%, 75%);\n  --card: hsl(200, 10%, 23%);\n  --card-foreground: hsl(40, 30%, 75%);\n  --popover: hsl(200, 10%, 23%);\n  --popover-foreground: hsl(40, 30%, 75%);\n  --primary: hsl(205, 100%, 75%);\n  --primary-foreground: hsl(0, 0%, 0%);\n  --secondary: hsl(200, 10%, 23%);\n  --secondary-foreground: hsl(40, 30%, 75%);\n  --muted: hsl(200, 10%, 23%);\n  --muted-foreground: hsl(40, 30%, 75%);\n  --accent: hsl(140, 100%, 75%);\n  --accent-foreground: hsl(0, 0%, 0%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(200, 10%, 30%);\n  --input: hsl(200, 10%, 23%);\n  --ring: hsl(140, 100%, 75%);\n}\n\n/* Dark Side Theme */\n.theme-dark {\n  --background: hsl(0, 0%, 14%);\n  --foreground: hsl(0, 100%, 50%);\n  --card: hsl(0, 0%, 0%);\n  --card-foreground: hsl(45, 40%, 94%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(45, 40%, 94%);\n  --primary: hsl(0, 100%, 50%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(0, 0%, 0%);\n  --secondary-foreground: hsl(45, 40%, 94%);\n  --muted: hsl(0, 0%, 0%);\n  --muted-foreground: hsl(45, 40%, 94%);\n  --accent: hsl(0, 0%, 87%);\n  --accent-foreground: hsl(0, 0%, 0%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 0%, 20%);\n  --input: hsl(0, 0%, 0%);\n  --ring: hsl(0, 0%, 87%);\n}\n\n/* Bounty Hunter Theme */\n.theme-bounty {\n  --background: hsl(25, 15%, 60%);\n  --foreground: hsl(340, 75%, 97%);\n  --card: hsl(285, 60%, 5%);\n  --card-foreground: hsl(0, 0%, 67%);\n  --popover: hsl(285, 60%, 5%);\n  --popover-foreground: hsl(0, 0%, 67%);\n  --primary: hsl(80, 20%, 50%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(285, 60%, 5%);\n  --secondary-foreground: hsl(0, 0%, 67%);\n  --muted: hsl(285, 60%, 5%);\n  --muted-foreground: hsl(0, 0%, 67%);\n  --accent: hsl(80, 20%, 50%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(285, 60%, 15%);\n  --input: hsl(285, 60%, 5%);\n  --ring: hsl(80, 20%, 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'VT323', monospace;\n  }\n}\n\n@layer components {\n  .font-aurebesh {\n    font-family: var(--font-aurebesh);\n  }\n\n  .virtual-keyboard-key {\n    @apply bg-card text-card-foreground border border-border rounded-md h-12 flex items-center justify-center text-lg font-bold transition-all duration-150 active:scale-95 hover:bg-accent hover:text-accent-foreground;\n  }\n\n  .translation-panel {\n    @apply bg-card text-card-foreground rounded-lg p-4 min-h-[120px] border border-border focus-within:ring-2 focus-within:ring-ring transition-all;\n  }\n\n  .game-overlay {\n    background: rgba(0, 0, 0, 0.9);\n    backdrop-filter: blur(10px);\n  }\n\n  .flashcard {\n    background: linear-gradient(135deg, var(--card), var(--muted));\n    border: 2px solid var(--border);\n  }\n}\n","size_bytes":5383},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/aurebesh-keyboard.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { ligatures, aurebeshCharacters } from '@/lib/aurebesh';\nimport { useState } from 'react';\n\ninterface AurebeshKeyboardProps {\n  onKeyPress: (key: string) => void;\n}\n\nexport function AurebeshKeyboard({ onKeyPress }: AurebeshKeyboardProps) {\n  const [showAurebesh, setShowAurebesh] = useState(false);\n  const numberRow = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\n  const topRow = ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'];\n  const middleRow = ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'];\n  const bottomRow = ['Z', 'X', 'C', 'V', 'B', 'N', 'M'];\n  const ligatureKeys = Object.keys(ligatures);\n  \n  const getCharacterDisplay = (letter: string) => {\n    if (showAurebesh && aurebeshCharacters[letter as keyof typeof aurebeshCharacters]) {\n      return aurebeshCharacters[letter as keyof typeof aurebeshCharacters];\n    }\n    return letter;\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg p-4 border border-border\">\n      <div className=\"flex items-center justify-end mb-3\">\n        <div className=\"flex items-center space-x-2\">\n          <Label htmlFor=\"aurebesh-toggle\" className=\"text-xs text-muted-foreground\">Latin</Label>\n          <Switch \n            id=\"aurebesh-toggle\"\n            checked={showAurebesh} \n            onCheckedChange={setShowAurebesh}\n            data-testid=\"keyboard-toggle\"\n          />\n          <Label htmlFor=\"aurebesh-toggle\" className=\"text-xs text-muted-foreground font-aurebesh\">Aurebesh</Label>\n        </div>\n      </div>\n      <div className=\"space-y-2\">\n        {/* Number Row */}\n        <div className=\"grid grid-cols-10 gap-1\">\n          {numberRow.map(number => (\n            <Button\n              key={number}\n              variant=\"ghost\"\n              className=\"virtual-keyboard-key\"\n              onClick={() => onKeyPress(number)}\n              data-testid={`key-${number}`}\n            >\n              {number}\n            </Button>\n          ))}\n        </div>\n        \n        {/* Letter Rows */}\n        <div className=\"grid grid-cols-10 gap-1\">\n          {topRow.map(letter => (\n            <Button\n              key={letter}\n              variant=\"ghost\"\n              className={`virtual-keyboard-key ${showAurebesh ? 'font-aurebesh' : ''}`}\n              onClick={() => onKeyPress(letter)}\n              data-testid={`key-${letter.toLowerCase()}`}\n            >\n              {getCharacterDisplay(letter)}\n            </Button>\n          ))}\n        </div>\n        <div className=\"grid grid-cols-9 gap-1 px-5\">\n          {middleRow.map(letter => (\n            <Button\n              key={letter}\n              variant=\"ghost\"\n              className={`virtual-keyboard-key ${showAurebesh ? 'font-aurebesh' : ''}`}\n              onClick={() => onKeyPress(letter)}\n              data-testid={`key-${letter.toLowerCase()}`}\n            >\n              {getCharacterDisplay(letter)}\n            </Button>\n          ))}\n        </div>\n        <div className=\"grid grid-cols-7 gap-1 px-10\">\n          {bottomRow.map(letter => (\n            <Button\n              key={letter}\n              variant=\"ghost\"\n              className={`virtual-keyboard-key ${showAurebesh ? 'font-aurebesh' : ''}`}\n              onClick={() => onKeyPress(letter)}\n              data-testid={`key-${letter.toLowerCase()}`}\n            >\n              {getCharacterDisplay(letter)}\n            </Button>\n          ))}\n        </div>\n        \n        {/* Function Keys */}\n        <div className=\"grid grid-cols-3 gap-2\">\n          <Button\n            variant=\"ghost\"\n            className=\"virtual-keyboard-key col-span-2\"\n            onClick={() => onKeyPress('SPACE')}\n            data-testid=\"key-space\"\n          >\n            Space\n          </Button>\n          <Button\n            variant=\"ghost\"\n            className=\"virtual-keyboard-key\"\n            onClick={() => onKeyPress('BACK')}\n            data-testid=\"key-backspace\"\n          >\n            ⌫\n          </Button>\n        </div>\n        \n        {/* Ligature Keys */}\n        <div className=\"grid grid-cols-4 gap-1\">\n          {ligatureKeys.map(ligature => (\n            <Button\n              key={ligature}\n              variant=\"ghost\"\n              className={`virtual-keyboard-key text-sm ${showAurebesh ? 'font-aurebesh' : ''}`}\n              onClick={() => onKeyPress(ligature)}\n              data-testid={`key-ligature-${ligature.toLowerCase()}`}\n            >\n              {showAurebesh ? ligatures[ligature as keyof typeof ligatures] : ligature.toUpperCase()}\n            </Button>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4724},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient } from '@/lib/queryClient';\nimport type { Settings } from '@shared/schema';\n\ntype Theme = \"Rebel\" | \"Imperial\" | \"Light Side\" | \"Dark Side\" | \"Bounty Hunter\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  fontSize: number;\n  setTheme: (theme: Theme) => void;\n  setFontSize: (size: number) => void;\n  applyTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  // Initialize from localStorage if available, fallback to defaults\n  const [theme, setThemeState] = useState<Theme>(() => {\n    if (typeof window !== 'undefined') {\n      const saved = localStorage.getItem('aurebesh-theme');\n      return (saved as Theme) || \"Rebel\";\n    }\n    return \"Rebel\";\n  });\n  \n  const [fontSize, setFontSizeState] = useState(() => {\n    if (typeof window !== 'undefined') {\n      const saved = localStorage.getItem('aurebesh-fontSize');\n      return saved ? parseInt(saved, 10) : 20;\n    }\n    return 20;\n  });\n\n  const { data: settings } = useQuery<Settings>({\n    queryKey: ['/api/settings'],\n  });\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (updates: Partial<Settings>) => {\n      const response = await fetch('/api/settings', {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updates),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/settings'] });\n    },\n  });\n\n  // Apply theme immediately from localStorage on mount\n  useEffect(() => {\n    applyThemeToDOM(theme);\n  }, []);\n\n  // Sync with server settings when they load\n  useEffect(() => {\n    if (settings) {\n      // Only update if server settings differ from local\n      if (settings.theme !== theme) {\n        setThemeState(settings.theme);\n        localStorage.setItem('aurebesh-theme', settings.theme);\n        applyThemeToDOM(settings.theme);\n      }\n      if (settings.fontSize !== fontSize) {\n        setFontSizeState(settings.fontSize);\n        localStorage.setItem('aurebesh-fontSize', settings.fontSize.toString());\n      }\n    }\n  }, [settings]);\n\n  const applyThemeToDOM = (themeName: Theme) => {\n    // Remove all theme classes\n    document.body.classList.remove('theme-imperial', 'theme-light', 'theme-dark', 'theme-bounty');\n    \n    // Apply new theme class\n    const themeMap = {\n      \"Rebel\": '',\n      \"Imperial\": 'theme-imperial',\n      \"Light Side\": 'theme-light',\n      \"Dark Side\": 'theme-dark',\n      \"Bounty Hunter\": 'theme-bounty'\n    };\n    \n    if (themeMap[themeName]) {\n      document.body.classList.add(themeMap[themeName]);\n    }\n  };\n\n  const setTheme = (newTheme: Theme) => {\n    setThemeState(newTheme);\n    localStorage.setItem('aurebesh-theme', newTheme);\n    applyThemeToDOM(newTheme);\n  };\n\n  const setFontSize = (size: number) => {\n    setFontSizeState(size);\n    localStorage.setItem('aurebesh-fontSize', size.toString());\n  };\n\n  const applyTheme = () => {\n    updateSettingsMutation.mutate({\n      theme,\n      fontSize,\n    });\n  };\n\n  return (\n    <ThemeContext.Provider value={{\n      theme,\n      fontSize,\n      setTheme,\n      setFontSize,\n      applyTheme,\n    }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":3661},"client/src/hooks/use-aurebesh.ts":{"content":"import { useState, useCallback } from 'react';\nimport { englishToAurebesh, aurebeshToEnglish } from '@/lib/aurebesh';\n\nexport function useAurebesh() {\n  const [englishText, setEnglishText] = useState('');\n  const [aurebeshText, setAurebeshText] = useState('');\n\n  const updateEnglish = useCallback((text: string) => {\n    setEnglishText(text);\n    setAurebeshText(englishToAurebesh(text));\n  }, []);\n\n  const updateAurebesh = useCallback((text: string) => {\n    setAurebeshText(text);\n    setEnglishText(aurebeshToEnglish(text));\n  }, []);\n\n  const clear = useCallback(() => {\n    setEnglishText('');\n    setAurebeshText('');\n  }, []);\n\n  return {\n    englishText,\n    aurebeshText,\n    updateEnglish,\n    updateAurebesh,\n    clear,\n  };\n}\n","size_bytes":740},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-storage.ts":{"content":"import { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient } from '@/lib/queryClient';\nimport type { HistoryEntry, SavedPhrase, GameProgress, Settings } from '@shared/schema';\n\nexport function useHistory() {\n  return useQuery<HistoryEntry[]>({\n    queryKey: ['/api/history'],\n  });\n}\n\nexport function useAddHistoryEntry() {\n  return useMutation({\n    mutationFn: async (entry: { english: string; aurebesh: string; timestamp: string }) => {\n      const response = await fetch('/api/history', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ ...entry, favorite: false }),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/history'] });\n    },\n  });\n}\n\nexport function useUpdateHistoryEntry() {\n  return useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<HistoryEntry> }) => {\n      const response = await fetch(`/api/history/${id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updates),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/history'] });\n    },\n  });\n}\n\nexport function useDeleteHistoryEntry() {\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/history/${id}`, {\n        method: 'DELETE',\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/history'] });\n    },\n  });\n}\n\nexport function useSavedPhrases() {\n  return useQuery<SavedPhrase[]>({\n    queryKey: ['/api/saved-phrases'],\n  });\n}\n\nexport function useAddSavedPhrase() {\n  return useMutation({\n    mutationFn: async (phrase: { phrase: string; timestamp: string }) => {\n      const response = await fetch('/api/saved-phrases', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(phrase),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/saved-phrases'] });\n    },\n  });\n}\n\nexport function useDeleteSavedPhrase() {\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/saved-phrases/${id}`, {\n        method: 'DELETE',\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/saved-phrases'] });\n    },\n  });\n}\n\nexport function useGameProgress() {\n  return useQuery<GameProgress>({\n    queryKey: ['/api/game-progress'],\n  });\n}\n\nexport function useUpdateGameProgress() {\n  return useMutation({\n    mutationFn: async (updates: Partial<GameProgress>) => {\n      const response = await fetch('/api/game-progress', {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updates),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/game-progress'] });\n    },\n  });\n}\n","size_bytes":3184},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/audio.ts":{"content":"class AudioManager {\n  private sounds: Map<string, HTMLAudioElement> = new Map();\n  private enabled: boolean = true;\n\n  constructor() {\n    // Initialize sound effects - organized by usage type\n    \n    // Game-specific sounds (reserve success for game victories only)\n    this.loadSound('success', '/sounds/ding.mp3'); // Game victories only\n    this.loadSound('error', '/sounds/buzz.mp3');   // Game failures\n    \n    // UI interaction sounds (using your custom uploaded sounds)\n    this.loadSound('click', '/sounds/click.mp3');       // Button clicks, keyboard presses  \n    this.loadSound('notification', '/sounds/chime.mp3'); // Saves, copies, general notifications\n    this.loadSound('whoosh', '/sounds/whoosh.mp3');     // Theme changes, modal transitions\n    this.loadSound('type', '/sounds/click.mp3');        // Typing/translation sounds (optional)\n  }\n\n  private loadSound(name: string, src: string) {\n    try {\n      const audio = new Audio(src);\n      audio.preload = 'auto';\n      audio.volume = 0.5; // Set reasonable volume\n      \n      // Add error handling\n      audio.addEventListener('error', (e) => {\n        console.warn(`Failed to load sound: ${name}`, e);\n      });\n      \n      // Add load success logging\n      audio.addEventListener('canplaythrough', () => {\n        console.log(`Successfully loaded sound: ${name}`);\n      });\n      \n      this.sounds.set(name, audio);\n    } catch (error) {\n      console.warn(`Failed to load sound: ${name}`, error);\n    }\n  }\n\n  play(soundName: string) {\n    if (!this.enabled) return;\n    \n    const sound = this.sounds.get(soundName);\n    if (sound) {\n      sound.currentTime = 0;\n      const playPromise = sound.play();\n      \n      if (playPromise !== undefined) {\n        playPromise\n          .then(() => {\n            console.log(`Successfully played sound: ${soundName}`);\n          })\n          .catch(error => {\n            console.warn(`Failed to play sound: ${soundName}`, error);\n          });\n      }\n    } else {\n      console.warn(`Sound not found: ${soundName}`);\n    }\n  }\n\n  setEnabled(enabled: boolean) {\n    this.enabled = enabled;\n  }\n\n  isEnabled(): boolean {\n    return this.enabled;\n  }\n}\n\nexport const audioManager = new AudioManager();\n","size_bytes":2227},"client/src/lib/aurebesh.ts":{"content":"// Aurebesh character mappings - using standard alphabet positions for this font\nexport const aurebeshCharacters = {\n  'A': 'A', 'B': 'B', 'C': 'C', 'D': 'D', 'E': 'E',\n  'F': 'F', 'G': 'G', 'H': 'H', 'I': 'I', 'J': 'J',\n  'K': 'K', 'L': 'L', 'M': 'M', 'N': 'N', 'O': 'O',\n  'P': 'P', 'Q': 'Q', 'R': 'R', 'S': 'S', 'T': 'T',\n  'U': 'U', 'V': 'V', 'W': 'W', 'X': 'X', 'Y': 'Y',\n  'Z': 'Z'\n};\n\n// Aurebesh ligature mappings - these work with the font\nexport const ligatures = {\n  \"ch\": \"\\uE011\",\n  \"sh\": \"\\uE016\", \n  \"th\": \"\\uE018\",\n  \"ae\": \"\\uE010\",\n  \"eo\": \"\\uE012\",\n  \"kh\": \"\\uE013\",\n  \"oo\": \"\\uE015\",\n  \"ng\": \"\\uE014\"\n};\n\nexport function englishToAurebesh(text: string): string {\n  text = text.toLowerCase();\n  let result = \"\";\n  let i = 0;\n  \n  while (i < text.length) {\n    if (i < text.length - 1 && text.substring(i, i + 2) in ligatures) {\n      result += ligatures[text.substring(i, i + 2) as keyof typeof ligatures];\n      i += 2;\n    } else {\n      const upperChar = text[i].toUpperCase();\n      if (aurebeshCharacters[upperChar as keyof typeof aurebeshCharacters]) {\n        result += aurebeshCharacters[upperChar as keyof typeof aurebeshCharacters];\n      } else {\n        result += text[i]; // Keep original character if no mapping\n      }\n      i += 1;\n    }\n  }\n  \n  return result;\n}\n\nexport function aurebeshToEnglish(text: string): string {\n  let result = \"\";\n  \n  for (const char of text) {\n    const normalizedChar = char.normalize('NFC');\n    const codePoint = normalizedChar.codePointAt(0);\n    let matched = false;\n    \n    for (const [lig, glyph] of Object.entries(ligatures)) {\n      if (codePoint === glyph.codePointAt(0)) {\n        result += lig;\n        matched = true;\n        break;\n      }\n    }\n    \n    if (!matched) {\n      // Check if it's an Aurebesh character we need to convert back\n      for (const [letter, glyph] of Object.entries(aurebeshCharacters)) {\n        if (codePoint === glyph.codePointAt(0)) {\n          result += letter.toLowerCase();\n          matched = true;\n          break;\n        }\n      }\n      if (!matched) {\n        result += normalizedChar.toLowerCase();\n      }\n    }\n  }\n  \n  return result;\n}\n\n// Preset phrases for translation\nexport const presetPhrases = [\n  \"May the Force be with you\",\n  \"I have a bad feeling about this\",\n  \"Do. Or do not. There is no try.\",\n  \"This is the way\",\n  \"Use the Force, Luke.\",\n  \"Help me, Obi-Wan Kenobi. You're my only hope.\",\n  \"These aren't the droids you're looking for.\",\n  \"I find your lack of faith disturbing.\",\n  \"The Force will be with you. Always.\",\n  \"Never tell me the odds!\",\n  \"It's a trap!\",\n  \"In my experience, there's no such thing as luck.\",\n  \"Stay on target.\",\n  \"I am your father.\",\n  \"I will not be the last Jedi.\",\n  \"Rebellions are built on hope.\",\n  \"I am one with the Force. The Force is with me.\",\n  \"I feel the good in you, the conflict.\",\n  \"Your eyes can deceive you; don't trust them.\",\n  \"The circle is now complete.\",\n  \"Remember, the Force will be with you, always.\",\n  \"Now this is podracing!\",\n  \"You were the chosen one!\",\n  \"I have the highground\",\n  \"You've taken your first step into a larger world.\",\n  \"Only a Sith deals in absolutes.\",\n  \"Power! Unlimited power!\",\n  \"I'm altering the deal. Pray I don't alter it any further.\",\n  \"Why, you stuck-up, half-witted, scruffy-looking nerf herder!\",\n  \"I suggest a new strategy, R2. Let the Wookiee win.\",\n  \"Truly wonderful, the mind of a child is.\",\n  \"I am a Jedi, like my father before me.\",\n  \"You don't know the power of the dark side!\",\n  \"Chewie, we're home.\",\n  \"I'll never turn to the dark side.\",\n  \"I've been waiting for you, Obi-Wan.\",\n  \"I've got a bad feeling about this.\",\n  \"I want to go home and rethink my life.\",\n  \"That's no moon. It's a space station.\",\n  \"You don't believe in the Force, do you?\",\n  \"Mind tricks don't work on me.\",\n  \"I'm just a simple man trying to make my way in the universe.\",\n  \"Fear leads to anger. Anger leads to hate. Hate leads to suffering.\",\n];\n\n// Game tier definitions\nexport const TIERS = {\n  1: [\n    // Single letters\n    ...Array.from('abcdefghijklmnopqrstuvwxyz'),\n    // Ligatures\n    ...Object.keys(ligatures)\n  ],\n  2: [\n    \"lightsaber\", \"blaster\", \"bowcaster\", \"thermal detonator\", \"ion cannon\",\n    \"disruptor\", \"electrostaff\", \"force pike\", \"comlink\", \"datapad\",\n    \"x-wing\", \"tie fighter\", \"millennium falcon\", \"star destroyer\", \"tie advanced\",\n    \"snowspeeder\", \"podracer\", \"slave i\", \"speeder bike\", \"imperial shuttle\",\n    \"luke\", \"leia\", \"han\", \"chewbacca\", \"yoda\",\n    \"obi wan\", \"anakin\", \"vader\", \"palpatine\", \"lando\",\n    \"wookiee\", \"ewok\", \"rodian\", \"twi'lek\", \"zabrak\",\n    \"mon calamari\", \"duros\", \"bothan\", \"kashyyykian\", \"jawa\",\n    \"tatooine\", \"coruscant\", \"naboo\", \"hoth\", \"endor\",\n    \"kamino\", \"geonosis\", \"mustafar\", \"dagobah\", \"kashyyyk\",\n    \"rebel alliance\", \"galactic empire\", \"first order\", \"resistance\", \"jedi order\",\n    \"sith order\", \"bounty hunters\", \"clone troopers\", \"stormtroopers\", \"droids\",\n  ],\n  3: presetPhrases\n};\n","size_bytes":5005},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/word-search.ts":{"content":"export interface WordSearchCell {\n  letter: string;\n  x: number;\n  y: number;\n  isFound: boolean;\n  isSelected: boolean;\n  belongsToWord?: string;\n}\n\nexport interface WordPosition {\n  word: string;\n  startX: number;\n  startY: number;\n  direction: [number, number];\n}\n\nexport interface WordSearchGrid {\n  cells: WordSearchCell[][];\n  wordsToFind: string[];\n  foundWords: string[];\n  size: number;\n  wordPositions: WordPosition[];\n}\n\nexport function generateWordSearch(words: string[], size: number): WordSearchGrid {\n  const grid: WordSearchCell[][] = Array(size).fill(null).map((_, y) =>\n    Array(size).fill(null).map((_, x) => ({\n      letter: '',\n      x,\n      y,\n      isFound: false,\n      isSelected: false,\n    }))\n  );\n\n  const directions = [\n    [0, 1],   // horizontal\n    [1, 0],   // vertical\n    [1, 1],   // diagonal down-right\n    [-1, 1],  // diagonal down-left\n  ];\n\n  const placed: Array<{ word: string; coords: Array<[number, number]> }> = [];\n  const wordPositions: WordPosition[] = [];\n\n  // Place words in grid\n  for (const word of words) {\n    const upperWord = word.toUpperCase();\n    const wordLength = upperWord.length;\n    let placedOk = false;\n    let attempts = 0;\n\n    while (!placedOk && attempts < 100) {\n      attempts++;\n      const [dirX, dirY] = directions[Math.floor(Math.random() * directions.length)];\n      \n      // Calculate valid starting positions\n      let startX, startY;\n      if (dirX === 1) {\n        startX = Math.floor(Math.random() * (size - wordLength + 1));\n      } else if (dirX === -1) {\n        startX = Math.floor(Math.random() * (size - wordLength + 1)) + wordLength - 1;\n      } else {\n        startX = Math.floor(Math.random() * size);\n      }\n\n      if (dirY === 1) {\n        startY = Math.floor(Math.random() * (size - wordLength + 1));\n      } else if (dirY === -1) {\n        startY = Math.floor(Math.random() * (size - wordLength + 1)) + wordLength - 1;\n      } else {\n        startY = Math.floor(Math.random() * size);\n      }\n\n      // Check if word can be placed\n      const coords: Array<[number, number]> = [];\n      let canPlace = true;\n\n      for (let i = 0; i < wordLength; i++) {\n        const x = startX + dirX * i;\n        const y = startY + dirY * i;\n        \n        if (x < 0 || x >= size || y < 0 || y >= size) {\n          canPlace = false;\n          break;\n        }\n\n        const existing = grid[y][x].letter;\n        if (existing !== '' && existing !== upperWord[i]) {\n          canPlace = false;\n          break;\n        }\n        \n        coords.push([x, y]);\n      }\n\n      if (canPlace) {\n        // Place the word\n        for (let i = 0; i < coords.length; i++) {\n          const [x, y] = coords[i];\n          grid[y][x].letter = upperWord[i];\n          grid[y][x].belongsToWord = upperWord;\n        }\n        placed.push({ word: upperWord, coords });\n        wordPositions.push({ \n          word: upperWord, \n          startX, \n          startY, \n          direction: [dirX, dirY] \n        });\n        placedOk = true;\n      }\n    }\n\n    if (!placedOk) {\n      console.warn(`Could not place word: ${word}`);\n    }\n  }\n\n  // Fill empty cells with random letters\n  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  for (let y = 0; y < size; y++) {\n    for (let x = 0; x < size; x++) {\n      if (grid[y][x].letter === '') {\n        grid[y][x].letter = letters[Math.floor(Math.random() * letters.length)];\n      }\n    }\n  }\n\n  return {\n    cells: grid,\n    wordsToFind: words.map(w => w.toUpperCase()),\n    foundWords: [],\n    size,\n    wordPositions,\n  };\n}\n\nexport function checkWordFound(\n  grid: WordSearchGrid,\n  startPos: [number, number],\n  endPos: [number, number]\n): string | null {\n  const [startX, startY] = startPos;\n  const [endX, endY] = endPos;\n  \n  // Calculate direction\n  const dirX = endX === startX ? 0 : (endX > startX ? 1 : -1);\n  const dirY = endY === startY ? 0 : (endY > startY ? 1 : -1);\n  \n  // Get word from grid\n  let word = '';\n  let x = startX;\n  let y = startY;\n  \n  while (true) {\n    if (x < 0 || x >= grid.size || y < 0 || y >= grid.size) break;\n    word += grid.cells[y][x].letter;\n    \n    if (x === endX && y === endY) break;\n    x += dirX;\n    y += dirY;\n  }\n  \n  // Check if word exists in words to find\n  if (grid.wordsToFind.includes(word) && !grid.foundWords.includes(word)) {\n    return word;\n  }\n  \n  // Check reverse\n  const reverseWord = word.split('').reverse().join('');\n  if (grid.wordsToFind.includes(reverseWord) && !grid.foundWords.includes(reverseWord)) {\n    return reverseWord;\n  }\n  \n  return null;\n}\n","size_bytes":4543},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/translator.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { useAurebesh } from '@/hooks/use-aurebesh';\nimport { useAddHistoryEntry, useAddSavedPhrase } from '@/hooks/use-storage';\nimport { useTheme } from '@/components/theme-provider';\nimport { AurebeshKeyboard } from '@/components/aurebesh-keyboard';\nimport { SettingsModal } from '@/components/modals/settings';\nimport { HistoryModal } from '@/components/modals/history';\nimport { SavedModal } from '@/components/modals/saved';\nimport { GamesMenuModal } from '@/components/modals/games-menu';\nimport { AboutModal } from '@/components/modals/about';\nimport { FlashcardsGame } from '@/components/games/flashcards';\nimport { WordSearchGame } from '@/components/games/word-search';\nimport { audioManager } from '@/lib/audio';\nimport { Copy, Clipboard, Trash2, Star, History, Bookmark, Gamepad2, Settings, Dices } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function TranslatorPage() {\n  const { englishText, aurebeshText, updateEnglish, updateAurebesh, clear } = useAurebesh();\n  const { fontSize } = useTheme();\n  const { toast } = useToast();\n  const addHistoryEntry = useAddHistoryEntry();\n  const addSavedPhrase = useAddSavedPhrase();\n\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [historyOpen, setHistoryOpen] = useState(false);\n  const [savedOpen, setSavedOpen] = useState(false);\n  const [gamesOpen, setGamesOpen] = useState(false);\n  const [aboutOpen, setAboutOpen] = useState(false);\n  const [flashcardsOpen, setFlashcardsOpen] = useState(false);\n  const [wordSearchOpen, setWordSearchOpen] = useState(false);\n\n  // Auto-save to history when translation changes (prevent duplicates)\n  const [lastSavedText, setLastSavedText] = useState('');\n  useEffect(() => {\n    if (englishText.trim() && aurebeshText.trim()) {\n      const currentText = `${englishText.trim()}|${aurebeshText.trim()}`;\n      if (currentText !== lastSavedText) {\n        const timeoutId = setTimeout(() => {\n          addHistoryEntry.mutate({\n            english: englishText,\n            aurebesh: aurebeshText,\n            timestamp: new Date().toISOString(),\n          });\n          setLastSavedText(currentText);\n        }, 2000);\n\n        return () => clearTimeout(timeoutId);\n      }\n    }\n  }, [englishText, aurebeshText, addHistoryEntry, lastSavedText]);\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(aurebeshText);\n      audioManager.play('notification');\n      toast({ title: \"Copied to clipboard!\" });\n    } catch (error) {\n      toast({ title: \"Failed to copy\", variant: \"destructive\" });\n    }\n  };\n\n  const handlePaste = async () => {\n    try {\n      const text = await navigator.clipboard.readText();\n      updateEnglish(text);\n      audioManager.play('notification');\n    } catch (error) {\n      toast({ title: \"Failed to paste\", variant: \"destructive\" });\n    }\n  };\n\n  const handleClear = () => {\n    clear();\n    audioManager.play('notification');\n  };\n\n  const handleSave = async () => {\n    if (englishText.trim() && aurebeshText.trim()) {\n      try {\n        await addSavedPhrase.mutateAsync({\n          phrase: `${englishText.trim()} = ${aurebeshText.trim()}`,\n          timestamp: new Date().toISOString()\n        });\n        audioManager.play('notification');\n        toast({ title: \"Phrase saved successfully!\" });\n      } catch (error) {\n        audioManager.play('error');\n        toast({ title: \"Failed to save phrase\", variant: \"destructive\" });\n      }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      {/* Header */}\n      <header className=\"flex justify-between items-center p-4 bg-card border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <h1 className=\"text-xl font-bold text-card-foreground\">Aurebesh Translator</h1>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setGamesOpen(true)}\n            className=\"w-12 h-12 bg-primary text-primary-foreground hover:bg-accent\"\n            data-testid=\"button-games\"\n          >\n            <Gamepad2 className=\"h-5 w-5\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setSettingsOpen(true)}\n            className=\"w-12 h-12 bg-primary text-primary-foreground hover:bg-accent\"\n            data-testid=\"button-settings\"\n          >\n            <Settings className=\"h-5 w-5\" />\n          </Button>\n        </div>\n      </header>\n\n      {/* Main Translation Interface */}\n      <main className=\"flex-1 p-4 space-y-4\">\n        {/* English Input */}\n        <div className=\"translation-panel\">\n          <Label className=\"block text-sm font-medium mb-2 text-muted-foreground\">\n            English Input\n          </Label>\n          <Textarea\n            value={englishText}\n            onChange={(e) => updateEnglish(e.target.value)}\n            className=\"w-full bg-transparent text-card-foreground resize-none outline-none border-none focus:ring-0\"\n            placeholder=\"Type your English text here...\"\n            rows={3}\n            style={{ fontSize: `${fontSize}px`, padding: '10px' }}\n            data-testid=\"input-english\"\n          />\n        </div>\n\n        {/* Aurebesh Output */}\n        <div className=\"translation-panel\">\n          <Label className=\"block text-sm font-medium mb-2 text-muted-foreground\">\n            Aurebesh Translation\n          </Label>\n          <Textarea\n            value={aurebeshText}\n            onChange={(e) => updateAurebesh(e.target.value)}\n            className=\"w-full bg-transparent text-card-foreground resize-none outline-none border-none focus:ring-0 font-aurebesh\"\n            placeholder=\"Aurebesh translation appears here...\"\n            rows={3}\n            style={{ fontSize: `${fontSize * 1.2}px`, padding: '10px' }}\n            data-testid=\"input-aurebesh\"\n          />\n        </div>\n\n\n        {/* Action Buttons */}\n        <div className=\"grid grid-cols-3 gap-3\">\n          <Button\n            variant=\"ghost\"\n            onClick={handleCopy}\n            className=\"flex flex-col items-center justify-center p-3 bg-card text-card-foreground hover:bg-accent hover:text-accent-foreground h-auto\"\n            data-testid=\"button-copy\"\n          >\n            <Copy className=\"w-5 h-5 mb-1\" />\n            <span className=\"text-xs\">Copy</span>\n          </Button>\n          <Button\n            variant=\"ghost\"\n            onClick={handlePaste}\n            className=\"flex flex-col items-center justify-center p-3 bg-card text-card-foreground hover:bg-accent hover:text-accent-foreground h-auto\"\n            data-testid=\"button-paste\"\n          >\n            <Clipboard className=\"w-5 h-5 mb-1\" />\n            <span className=\"text-xs\">Paste</span>\n          </Button>\n          <Button\n            variant=\"ghost\"\n            onClick={handleClear}\n            className=\"flex flex-col items-center justify-center p-3 bg-card text-card-foreground hover:bg-accent hover:text-accent-foreground h-auto\"\n            data-testid=\"button-clear\"\n          >\n            <Trash2 className=\"w-5 h-5 mb-1\" />\n            <span className=\"text-xs\">Clear</span>\n          </Button>\n          <Button\n            variant=\"ghost\"\n            onClick={handleSave}\n            className=\"flex flex-col items-center justify-center p-3 bg-card text-card-foreground hover:bg-accent hover:text-accent-foreground h-auto\"\n            data-testid=\"button-save\"\n          >\n            <Star className=\"w-5 h-5 mb-1\" />\n            <span className=\"text-xs\">Save</span>\n          </Button>\n          <Button\n            variant=\"ghost\"\n            onClick={() => setHistoryOpen(true)}\n            className=\"flex flex-col items-center justify-center p-3 bg-card text-card-foreground hover:bg-accent hover:text-accent-foreground h-auto\"\n            data-testid=\"button-history\"\n          >\n            <History className=\"w-5 h-5 mb-1\" />\n            <span className=\"text-xs\">History</span>\n          </Button>\n          <Button\n            variant=\"ghost\"\n            onClick={() => setSavedOpen(true)}\n            className=\"flex flex-col items-center justify-center p-3 bg-card text-card-foreground hover:bg-accent hover:text-accent-foreground h-auto\"\n            data-testid=\"button-saved\"\n          >\n            <Bookmark className=\"w-5 h-5 mb-1\" />\n            <span className=\"text-xs\">Saved</span>\n          </Button>\n        </div>\n\n        {/* Virtual Aurebesh Keyboard */}\n        <AurebeshKeyboard \n          onKeyPress={(key) => {\n            if (key === 'SPACE') {\n              updateEnglish(englishText + ' ');\n            } else if (key === 'BACK') {\n              updateEnglish(englishText.slice(0, -1));\n            } else {\n              // Add to English text and let the translation engine handle ligatures\n              updateEnglish(englishText + key.toLowerCase());\n            }\n          }}\n        />\n      </main>\n\n      {/* Modals */}\n      <SettingsModal open={settingsOpen} onOpenChange={setSettingsOpen} />\n      <HistoryModal open={historyOpen} onOpenChange={setHistoryOpen} />\n      <SavedModal \n        open={savedOpen} \n        onOpenChange={setSavedOpen}\n        currentPhrase={englishText}\n      />\n      <GamesMenuModal \n        open={gamesOpen} \n        onOpenChange={setGamesOpen}\n        onFlashcards={() => {\n          setGamesOpen(false);\n          setFlashcardsOpen(true);\n        }}\n        onWordSearch={() => {\n          setGamesOpen(false);\n          setWordSearchOpen(true);\n        }}\n      />\n      <AboutModal open={aboutOpen} onOpenChange={setAboutOpen} />\n\n      {/* Games */}\n      <FlashcardsGame open={flashcardsOpen} onOpenChange={setFlashcardsOpen} />\n      <WordSearchGame open={wordSearchOpen} onOpenChange={setWordSearchOpen} />\n    </div>\n  );\n}\n","size_bytes":10034},"client/src/components/games/flashcards.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Dialog, DialogContent } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { useGameProgress, useUpdateGameProgress } from '@/hooks/use-storage';\nimport { TIERS, englishToAurebesh } from '@/lib/aurebesh';\nimport { audioManager } from '@/lib/audio';\nimport { X, RotateCcw, ArrowRight, Volume2, VolumeX } from 'lucide-react';\n\ninterface FlashcardsGameProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function FlashcardsGame({ open, onOpenChange }: FlashcardsGameProps) {\n  const { data: gameProgress } = useGameProgress();\n  const updateGameProgress = useUpdateGameProgress();\n\n  const [currentTier, setCurrentTier] = useState(1);\n  const [currentCard, setCurrentCard] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [gameCards, setGameCards] = useState<string[]>([]);\n  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);\n  const [currentOptions, setCurrentOptions] = useState<string[]>([]);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n\n  useEffect(() => {\n    if (open && gameProgress) {\n      // Initialize game with tier 1 or highest unlocked tier\n      const maxTier = Math.max(...gameProgress.unlockedTiers);\n      setCurrentTier(maxTier);\n      startNewGame(maxTier);\n    }\n  }, [open, gameProgress]);\n\n  const startNewGame = (tier: number) => {\n    const tierData = TIERS[tier as keyof typeof TIERS] || TIERS[1];\n    const shuffled = [...tierData].sort(() => Math.random() - 0.5).slice(0, 25);\n    setGameCards(shuffled);\n    setCurrentCard(0);\n    setScore(0);\n    setShowAnswer(false);\n    setSelectedAnswer(null);\n    setCurrentOptions([]);\n  };\n\n  const generateAnswerOptions = (correctAnswer: string) => {\n    const tierData = TIERS[currentTier as keyof typeof TIERS] || TIERS[1];\n    const otherOptions = tierData.filter(item => item !== correctAnswer);\n    const wrongAnswers = otherOptions.sort(() => Math.random() - 0.5).slice(0, 3);\n    const allOptions = [correctAnswer, ...wrongAnswers].sort(() => Math.random() - 0.5);\n    return allOptions;\n  };\n\n  // Generate options when card changes\n  useEffect(() => {\n    if (gameCards[currentCard]) {\n      setCurrentOptions(generateAnswerOptions(gameCards[currentCard]));\n    }\n  }, [currentCard, gameCards]);\n\n  const handleAnswer = (answer: string) => {\n    setSelectedAnswer(answer);\n    setShowAnswer(true);\n    \n    const correct = answer === gameCards[currentCard];\n    if (correct) {\n      setScore(score + 1);\n      if (soundEnabled) audioManager.play('success');\n    } else {\n      if (soundEnabled) audioManager.play('error');\n    }\n\n    setTimeout(() => {\n      if (currentCard < gameCards.length - 1) {\n        setCurrentCard(currentCard + 1);\n        setShowAnswer(false);\n        setSelectedAnswer(null);\n      } else {\n        // Game finished\n        const finalScore = correct ? score + 1 : score;\n        const requiredScore = Math.ceil(gameCards.length * 0.65); // 65% correct needed\n        if (finalScore >= requiredScore && gameProgress) {\n          // Unlock next tier\n          const newUnlockedTiers = [...gameProgress.unlockedTiers];\n          if (!newUnlockedTiers.includes(currentTier + 1) && currentTier < 3) {\n            newUnlockedTiers.push(currentTier + 1);\n            updateGameProgress.mutate({ unlockedTiers: newUnlockedTiers });\n          }\n        }\n      }\n    }, 1500);\n  };\n\n  const nextTier = () => {\n    if (gameProgress?.unlockedTiers.includes(currentTier + 1)) {\n      const newTier = currentTier + 1;\n      setCurrentTier(newTier);\n      startNewGame(newTier);\n    }\n  };\n\n  const restart = () => {\n    startNewGame(currentTier);\n  };\n\n  if (!gameProgress || gameCards.length === 0) {\n    return null;\n  }\n\n  const currentPrompt = gameCards[currentCard];\n  const progress = ((currentCard + (showAnswer ? 1 : 0)) / gameCards.length) * 100;\n  const isGameComplete = currentCard >= gameCards.length - 1 && showAnswer;\n\n  const tierNames = {\n    1: 'Letters & Ligatures',\n    2: 'Star Wars Vocabulary',\n    3: 'Famous Quotes'\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"bg-background border-border max-w-md max-h-[90vh] game-overlay\">\n        <div className=\"h-full flex flex-col p-4\">\n          {/* Game Header */}\n          <div className=\"flex justify-between items-start mb-4\">\n            <div className=\"text-foreground text-center flex-1\">\n              <div className=\"text-base font-semibold text-foreground opacity-90\">\n                Tier {currentTier} - {tierNames[currentTier as keyof typeof tierNames]}\n              </div>\n              <div className=\"text-xl font-bold text-foreground\">Score: {score}/{gameCards.length}</div>\n              <div className=\"text-base font-semibold text-foreground opacity-90\">\n                Progress: {currentCard + 1}/{gameCards.length}\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setSoundEnabled(!soundEnabled)}\n              className=\"p-2 text-foreground hover:text-foreground hover:bg-accent\"\n              data-testid=\"button-toggle-sound\"\n            >\n              {soundEnabled ? <Volume2 className=\"w-4 h-4\" /> : <VolumeX className=\"w-4 h-4\" />}\n            </Button>\n          </div>\n\n          {/* Progress Bar */}\n          <Progress value={progress} className=\"w-full mb-6\" />\n\n          {/* Flashcard */}\n          <div className=\"flashcard rounded-xl p-8 mb-6 flex-1 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"text-6xl font-aurebesh mb-4 text-card-foreground\" data-testid=\"text-flashcard-prompt\">\n                {currentPrompt ? englishToAurebesh(currentPrompt) : ''}\n              </div>\n              <div className=\"text-foreground text-lg font-medium opacity-80\">What does this translate to?</div>\n            </div>\n          </div>\n\n          {isGameComplete ? (\n            /* Game Complete */\n            <div className=\"space-y-4\">\n              <div className=\"text-center\">\n                <h3 className=\"text-2xl font-bold text-foreground mb-2\">Game Complete!</h3>\n                <div className=\"space-y-2\">\n                  <p className=\"text-foreground text-lg font-medium\">Final Score: {score}/{gameCards.length}</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{Math.round((score / gameCards.length) * 100)}%</p>\n                  {(() => {\n                    const percentage = (score / gameCards.length) * 100;\n                    const requiredScore = Math.ceil(gameCards.length * 0.65);\n                    const passed = score >= requiredScore;\n                    return (\n                      <p className={`font-bold ${passed ? 'text-green-500' : 'text-red-500'}`}>\n                        {passed ? '✓ PASSED' : '✗ FAILED'} (Need 65% to unlock next tier)\n                      </p>\n                    );\n                  })()}\n                  {(() => {\n                    const requiredScore = Math.ceil(gameCards.length * 0.65);\n                    return score >= requiredScore && currentTier < 3 && gameProgress.unlockedTiers.includes(currentTier + 1) && (\n                      <p className=\"text-accent mt-2\">🎉 Next tier unlocked!</p>\n                    );\n                  })()}\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-3\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={restart}\n                  className=\"bg-accent text-accent-foreground hover:opacity-90 flex items-center space-x-2\"\n                  data-testid=\"button-restart-game\"\n                >\n                  <RotateCcw className=\"w-4 h-4\" />\n                  <span>Restart</span>\n                </Button>\n                <Button\n                  onClick={nextTier}\n                  disabled={!gameProgress.unlockedTiers.includes(currentTier + 1) || currentTier >= 3}\n                  className=\"bg-primary text-primary-foreground hover:opacity-90 flex items-center space-x-2\"\n                  data-testid=\"button-next-tier\"\n                >\n                  <ArrowRight className=\"w-4 h-4\" />\n                  <span>Next Tier</span>\n                </Button>\n              </div>\n            </div>\n          ) : (\n            /* Answer Options */\n            <>\n              <div className=\"grid grid-cols-2 gap-3 mb-4\">\n                {currentOptions.map((option, index) => (\n                  <Button\n                    key={option}\n                    variant=\"ghost\"\n                    onClick={() => handleAnswer(option)}\n                    disabled={showAnswer}\n                    className={`bg-card text-card-foreground p-4 rounded-lg border border-border hover:bg-accent hover:text-accent-foreground transition-colors ${\n                      showAnswer && option === gameCards[currentCard] \n                        ? 'bg-green-500 text-white' \n                        : showAnswer && option === selectedAnswer && option !== gameCards[currentCard]\n                        ? 'bg-red-500 text-white'\n                        : ''\n                    }`}\n                    data-testid={`button-answer-${index}`}\n                  >\n                    {option}\n                  </Button>\n                ))}\n              </div>\n\n            </>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9648},"client/src/components/games/word-search.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Dialog, DialogContent } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { generateWordSearch, checkWordFound, type WordSearchGrid } from '@/lib/word-search';\nimport { TIERS } from '@/lib/aurebesh';\nimport { audioManager } from '@/lib/audio';\nimport { X, RotateCcw } from 'lucide-react';\n\ninterface WordSearchGameProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function WordSearchGame({ open, onOpenChange }: WordSearchGameProps) {\n  const [grid, setGrid] = useState<WordSearchGrid | null>(null);\n  const [selectedCells, setSelectedCells] = useState<Array<[number, number]>>([]);\n  const [isSelecting, setIsSelecting] = useState(false);\n  const [totalHintsUsed, setTotalHintsUsed] = useState(0);\n  const [usedHintWords, setUsedHintWords] = useState<Set<string>>(new Set());\n  const [flashingCell, setFlashingCell] = useState<[number, number] | null>(null);\n\n  useEffect(() => {\n    if (open) {\n      initializeGame();\n    }\n  }, [open]);\n\n  const initializeGame = () => {\n    const tier2Words = TIERS[2] as string[];\n    const shuffledWords = [...tier2Words].sort(() => Math.random() - 0.5);\n    const words = shuffledWords.slice(0, 6); // Take random 6 words from tier 2\n    const newGrid = generateWordSearch(words, 8);\n    setGrid(newGrid);\n    setSelectedCells([]);\n    setIsSelecting(false);\n    setTotalHintsUsed(0);\n    setUsedHintWords(new Set());\n    setFlashingCell(null);\n  };\n\n  const handleCellClick = (x: number, y: number) => {\n    if (!grid) return;\n\n    if (!isSelecting) {\n      // Start selection\n      setSelectedCells([[x, y]]);\n      setIsSelecting(true);\n    } else {\n      // End selection\n      const startPos = selectedCells[0];\n      const endPos: [number, number] = [x, y];\n      \n      const foundWord = checkWordFound(grid, startPos, endPos);\n      \n      if (foundWord) {\n        // Word found!\n        audioManager.play('success');\n        const newFoundWords = [...grid.foundWords, foundWord];\n        setGrid({\n          ...grid,\n          foundWords: newFoundWords\n        });\n        \n        // Mark cells as found\n        markCellsAsFound(startPos, endPos);\n      } else {\n        audioManager.play('error');\n      }\n      \n      setSelectedCells([]);\n      setIsSelecting(false);\n    }\n  };\n\n  const markCellsAsFound = (startPos: [number, number], endPos: [number, number]) => {\n    if (!grid) return;\n\n    const [startX, startY] = startPos;\n    const [endX, endY] = endPos;\n    \n    const dirX = endX === startX ? 0 : (endX > startX ? 1 : -1);\n    const dirY = endY === startY ? 0 : (endY > startY ? 1 : -1);\n    \n    const newCells = grid.cells.map(row => [...row]);\n    \n    let x = startX;\n    let y = startY;\n    \n    while (true) {\n      if (x >= 0 && x < grid.size && y >= 0 && y < grid.size) {\n        newCells[y][x] = { ...newCells[y][x], isFound: true };\n      }\n      \n      if (x === endX && y === endY) break;\n      x += dirX;\n      y += dirY;\n    }\n    \n    setGrid({ ...grid, cells: newCells });\n  };\n\n  const clearSelection = () => {\n    setSelectedCells([]);\n    setIsSelecting(false);\n  };\n\n  const restart = () => {\n    initializeGame();\n  };\n\n  const useHint = (word: string) => {\n    if (!grid) return;\n    \n    if (totalHintsUsed >= 3 || usedHintWords.has(word)) return; // Max 3 total hints, 1 per word\n    \n    // Find the word position in the grid\n    const wordPosition = grid.wordPositions.find((pos: any) => pos.word === word);\n    if (!wordPosition) return;\n    \n    // Get the first letter position\n    const firstLetterPos: [number, number] = [wordPosition.startX, wordPosition.startY];\n    \n    // Flash the first letter for 1 second\n    setFlashingCell(firstLetterPos);\n    setTimeout(() => setFlashingCell(null), 1000);\n    \n    // Update hints used\n    setTotalHintsUsed(prev => prev + 1);\n    setUsedHintWords(prev => new Set(Array.from(prev).concat([word])));\n    audioManager.play('success');\n  };\n\n  if (!grid) {\n    return null;\n  }\n\n  const isGameComplete = grid.foundWords.length === grid.wordsToFind.length;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"bg-background border-border max-w-sm max-h-[90vh] w-[95vw] sm:w-auto game-overlay\">\n        <div className=\"h-full flex flex-col p-3 overflow-hidden\">\n          {/* Game Header */}\n          <div className=\"flex justify-center items-center mb-3\">\n            <h2 className=\"text-2xl font-bold text-foreground\">Word Search</h2>\n          </div>\n\n          {/* Instructions */}\n          <div className=\"bg-card p-2 rounded-lg mb-3 border border-border\">\n            <p className=\"text-base font-medium text-foreground text-center opacity-80\">\n              Find the hidden English words. Tap first and last letter.\n            </p>\n          </div>\n\n          {/* Word Search Grid */}\n          <div className=\"flex items-center justify-center mb-2\">\n            <div className=\"grid grid-cols-8 gap-px p-2 bg-card rounded-lg border border-border\">\n              {grid.cells.flat().map((cell, index) => (\n                <Button\n                  key={index}\n                  variant=\"ghost\"\n                  className={`w-7 h-7 text-xs font-aurebesh border border-border rounded transition-colors ${\n                    cell.isFound \n                      ? 'bg-green-500 text-white' \n                      : selectedCells.some(([x, y]) => x === cell.x && y === cell.y)\n                      ? 'bg-accent text-accent-foreground'\n                      : flashingCell && flashingCell[0] === cell.x && flashingCell[1] === cell.y\n                      ? 'bg-yellow-400 text-black animate-pulse'\n                      : 'bg-muted text-muted-foreground hover:bg-accent hover:text-accent-foreground'\n                  }`}\n                  onClick={() => handleCellClick(cell.x, cell.y)}\n                  data-testid={`grid-cell-${cell.x}-${cell.y}`}\n                >\n                  {cell.letter}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {/* Words to Find */}\n          <div className=\"bg-card p-2 rounded-lg mb-2 border border-border\">\n            <div className=\"flex items-center justify-between mb-1\">\n              <h3 className=\"text-base font-semibold text-foreground\">Find:</h3>\n              <span className=\"text-sm font-medium text-foreground opacity-80\">Hints: {3 - totalHintsUsed}/3</span>\n            </div>\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-1 text-xs\">\n              {grid.wordsToFind.map((word) => (\n                <div key={word} className=\"flex items-center\">\n                  {!grid.foundWords.includes(word) && totalHintsUsed < 3 && !usedHintWords.has(word) && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => useHint(word)}\n                      className=\"h-5 w-5 px-0 text-xs shrink-0 mr-1 min-w-5\"\n                      data-testid={`hint-${word.toLowerCase()}`}\n                    >\n                      💡\n                    </Button>\n                  )}\n                  <span\n                    className={`text-sm font-medium truncate block ${\n                      grid.foundWords.includes(word) \n                        ? 'text-green-500 line-through' \n                        : 'text-foreground'\n                    }`}\n                    data-testid={`word-target-${word.toLowerCase()}`}\n                    title={word}\n                  >\n                    {word}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {isGameComplete ? (\n            /* Game Complete */\n            <div className=\"space-y-4\">\n              <div className=\"text-center\">\n                <h3 className=\"text-xl font-bold text-card-foreground mb-2\">Congratulations!</h3>\n                <p className=\"text-muted-foreground\">You found all the words!</p>\n              </div>\n              <Button\n                onClick={restart}\n                className=\"bg-primary text-primary-foreground hover:opacity-90 w-full flex items-center space-x-2\"\n                data-testid=\"button-restart-word-search\"\n              >\n                <RotateCcw className=\"w-4 h-4\" />\n                <span>Play Again</span>\n              </Button>\n            </div>\n          ) : (\n            /* Game Controls */\n            <div className=\"grid grid-cols-2 gap-2\">\n              <Button\n                variant=\"ghost\"\n                onClick={clearSelection}\n                className=\"bg-accent text-accent-foreground hover:opacity-90\"\n                data-testid=\"button-clear-selection\"\n              >\n                Clear\n              </Button>\n              <Button\n                onClick={restart}\n                className=\"bg-primary text-primary-foreground hover:opacity-90 flex items-center justify-center space-x-1\"\n                data-testid=\"button-new-game-word-search\"\n              >\n                <RotateCcw className=\"w-3 h-3\" />\n                <span>New</span>\n              </Button>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9255},"client/src/components/modals/about.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { ExternalLink } from 'lucide-react';\n\ninterface AboutModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function AboutModal({ open, onOpenChange }: AboutModalProps) {\n  const handleVisitChannel = () => {\n    window.open('https://www.youtube.com/@imperialremnantpodcast', '_blank');\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"bg-card text-card-foreground border-border max-w-md max-h-[80vh]\">\n        <DialogHeader>\n          <DialogTitle>About</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4 text-sm\">\n          <div>\n            <h3 className=\"font-semibold mb-2\">Imperial Remnant Podcast © 2025</h3>\n            <p className=\"text-muted-foreground\">All rights reserved.</p>\n          </div>\n\n          <div>\n            <p className=\"text-muted-foreground\">\n              This app translates English to Aurebesh for personal use only. \n              No warranty is provided.\n            </p>\n          </div>\n\n          <div>\n            <p className=\"text-muted-foreground\">\n              Assets used in this app (fonts, icons, etc.) are either open source \n              or licensed for personal use only.\n            </p>\n          </div>\n\n          <div>\n            <p className=\"text-muted-foreground mb-2\">\n              For more content, visit our YouTube channel:\n            </p>\n            <Button\n              variant=\"ghost\"\n              onClick={handleVisitChannel}\n              className=\"bg-primary text-primary-foreground hover:bg-accent flex items-center space-x-2\"\n              data-testid=\"button-visit-channel\"\n            >\n              <ExternalLink className=\"w-4 h-4\" />\n              <span>Imperial Remnant Podcast</span>\n            </Button>\n          </div>\n\n          <div className=\"pt-4 border-t border-border\">\n            <p className=\"text-xs text-muted-foreground\">\n              <strong>Disclaimer:</strong> This is a fan-made app created for entertainment purposes only. \n              It is not an official Star Wars product and is not affiliated with Lucasfilm, Disney, or any related entities.\n            </p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2407},"client/src/components/modals/games-menu.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Brain, Search } from 'lucide-react';\n\ninterface GamesMenuModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onFlashcards: () => void;\n  onWordSearch: () => void;\n}\n\nexport function GamesMenuModal({ open, onOpenChange, onFlashcards, onWordSearch }: GamesMenuModalProps) {\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"bg-card text-card-foreground border-border max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Training Games</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-3\">\n          <Button\n            variant=\"ghost\"\n            className=\"w-full p-4 bg-primary text-primary-foreground hover:bg-accent flex items-center space-x-3 justify-start h-auto\"\n            onClick={onFlashcards}\n            data-testid=\"button-flashcards\"\n          >\n            <Brain className=\"w-6 h-6\" />\n            <div className=\"text-left\">\n              <div className=\"font-medium\">Flashcards</div>\n              <div className=\"text-sm opacity-90\">Test your Aurebesh knowledge</div>\n            </div>\n          </Button>\n          <Button\n            variant=\"ghost\"\n            className=\"w-full p-4 bg-primary text-primary-foreground hover:bg-accent flex items-center space-x-3 justify-start h-auto\"\n            onClick={onWordSearch}\n            data-testid=\"button-word-search\"\n          >\n            <Search className=\"w-6 h-6\" />\n            <div className=\"text-left\">\n              <div className=\"font-medium\">Word Search</div>\n              <div className=\"text-sm opacity-90\">Find hidden Star Wars terms</div>\n            </div>\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":1873},"client/src/components/modals/history.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { useHistory, useUpdateHistoryEntry, useDeleteHistoryEntry } from '@/hooks/use-storage';\nimport { Copy, Star, Trash2 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface HistoryModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function HistoryModal({ open, onOpenChange }: HistoryModalProps) {\n  const { data: history = [], isLoading } = useHistory();\n  const updateHistoryEntry = useUpdateHistoryEntry();\n  const deleteHistoryEntry = useDeleteHistoryEntry();\n  const { toast } = useToast();\n\n  const handleCopy = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({ title: \"Copied to clipboard!\" });\n    } catch (error) {\n      toast({ title: \"Failed to copy\", variant: \"destructive\" });\n    }\n  };\n\n  const toggleFavorite = (id: string, currentFavorite: boolean) => {\n    updateHistoryEntry.mutate({\n      id,\n      updates: { favorite: !currentFavorite }\n    });\n  };\n\n  const deleteEntry = (id: string) => {\n    deleteHistoryEntry.mutate(id);\n  };\n\n  if (isLoading) {\n    return (\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"bg-card text-card-foreground border-border max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Translation History</DialogTitle>\n          </DialogHeader>\n          <div className=\"p-4 text-center text-muted-foreground\">Loading...</div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"bg-card text-card-foreground border-border max-w-md max-h-[80vh]\">\n        <DialogHeader>\n          <DialogTitle>Translation History</DialogTitle>\n        </DialogHeader>\n        \n        <ScrollArea className=\"h-[400px] w-full\">\n          {history.length === 0 ? (\n            <div className=\"p-4 text-center text-muted-foreground\">\n              No translation history yet\n            </div>\n          ) : (\n            <div className=\"space-y-2 p-2\">\n              {history.map((entry, index) => (\n                <div\n                  key={entry.id}\n                  className={`p-3 rounded-lg border border-border ${\n                    index % 2 === 0 ? 'bg-card' : 'bg-muted'\n                  }`}\n                >\n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm text-card-foreground truncate\">\n                        {entry.english}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {new Date(entry.timestamp).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div className=\"flex space-x-2 ml-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => handleCopy(entry.english)}\n                        className=\"h-8 w-8\"\n                        data-testid={`button-copy-history-${index}`}\n                      >\n                        <Copy className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => toggleFavorite(entry.id, entry.favorite)}\n                        className={`h-8 w-8 ${entry.favorite ? 'text-yellow-500' : 'text-muted-foreground'}`}\n                        data-testid={`button-favorite-history-${index}`}\n                      >\n                        <Star className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => deleteEntry(entry.id)}\n                        className=\"h-8 w-8 text-destructive\"\n                        data-testid={`button-delete-history-${index}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4502},"client/src/components/modals/saved.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { useSavedPhrases, useAddSavedPhrase, useDeleteSavedPhrase } from '@/hooks/use-storage';\nimport { Copy, Trash2, Plus } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface SavedModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  currentPhrase?: string;\n}\n\nexport function SavedModal({ open, onOpenChange, currentPhrase }: SavedModalProps) {\n  const { data: savedPhrases = [], isLoading } = useSavedPhrases();\n  const addSavedPhrase = useAddSavedPhrase();\n  const deleteSavedPhrase = useDeleteSavedPhrase();\n  const { toast } = useToast();\n\n  const handleCopy = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({ title: \"Copied to clipboard!\" });\n    } catch (error) {\n      toast({ title: \"Failed to copy\", variant: \"destructive\" });\n    }\n  };\n\n  const handleSave = () => {\n    if (currentPhrase?.trim()) {\n      const isAlreadySaved = savedPhrases.some(p => p.phrase === currentPhrase.trim());\n      if (isAlreadySaved) {\n        toast({ title: \"Phrase already saved!\" });\n        return;\n      }\n\n      addSavedPhrase.mutate({\n        phrase: currentPhrase.trim(),\n        timestamp: new Date().toISOString(),\n      });\n      toast({ title: \"Phrase saved!\" });\n    }\n  };\n\n  const deletePhrase = (id: string) => {\n    deleteSavedPhrase.mutate(id);\n  };\n\n  if (isLoading) {\n    return (\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"bg-card text-card-foreground border-border max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Saved Phrases</DialogTitle>\n          </DialogHeader>\n          <div className=\"p-4 text-center text-muted-foreground\">Loading...</div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"bg-card text-card-foreground border-border max-w-md max-h-[80vh]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            Saved Phrases\n            {currentPhrase?.trim() && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleSave}\n                className=\"h-8 w-8\"\n                data-testid=\"button-save-current\"\n              >\n                <Plus className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <ScrollArea className=\"h-[400px] w-full\">\n          {savedPhrases.length === 0 ? (\n            <div className=\"p-4 text-center text-muted-foreground\">\n              No saved phrases yet\n            </div>\n          ) : (\n            <div className=\"space-y-2 p-2\">\n              {savedPhrases.map((phrase, index) => (\n                <div\n                  key={phrase.id}\n                  className={`p-3 rounded-lg border border-border ${\n                    index % 2 === 0 ? 'bg-card' : 'bg-muted'\n                  }`}\n                >\n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"flex-1 min-w-0\">\n                      {phrase.phrase.includes(' = ') ? (\n                        <div className=\"text-sm text-card-foreground\">\n                          <span>{phrase.phrase.split(' = ')[0]}</span>\n                          <span className=\"text-muted-foreground\"> = </span>\n                          <span className=\"font-aurebesh\">{phrase.phrase.split(' = ')[1]}</span>\n                        </div>\n                      ) : (\n                        <p className=\"text-sm text-card-foreground\">\n                          {phrase.phrase}\n                        </p>\n                      )}\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {new Date(phrase.timestamp).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div className=\"flex space-x-2 ml-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => handleCopy(phrase.phrase)}\n                        className=\"h-8 w-8\"\n                        data-testid={`button-copy-saved-${index}`}\n                      >\n                        <Copy className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => deletePhrase(phrase.id)}\n                        className=\"h-8 w-8 text-destructive\"\n                        data-testid={`button-delete-saved-${index}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5179},"client/src/components/modals/settings.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Slider } from '@/components/ui/slider';\nimport { useTheme } from '@/components/theme-provider';\nimport { audioManager } from '@/lib/audio';\n\ninterface SettingsModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function SettingsModal({ open, onOpenChange }: SettingsModalProps) {\n  const { theme, fontSize, setTheme, setFontSize, applyTheme } = useTheme();\n\n  const themes = [\n    { id: \"Rebel\", name: \"Rebel Alliance\", color: \"hsl(15, 75%, 58%)\" },\n    { id: \"Imperial\", name: \"Galactic Empire\", color: \"hsl(0, 50%, 40%)\" },\n    { id: \"Light Side\", name: \"Light Side\", color: \"hsl(205, 100%, 75%)\" },\n    { id: \"Dark Side\", name: \"Dark Side\", color: \"hsl(0, 100%, 50%)\" },\n    { id: \"Bounty Hunter\", name: \"Bounty Hunter\", color: \"hsl(80, 20%, 50%)\" },\n  ] as const;\n\n  const handleApply = () => {\n    applyTheme();\n    onOpenChange(false);\n  };\n\n  const handleReset = () => {\n    setTheme(\"Rebel\");\n    setFontSize(20);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"bg-card text-card-foreground border-border max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-card-foreground\">Settings</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Theme Selection */}\n          <div>\n            <Label className=\"block text-sm font-medium mb-3 text-muted-foreground\">\n              Theme\n            </Label>\n            <div className=\"grid grid-cols-1 gap-2\">\n              {themes.map((themeOption) => (\n                <Button\n                  key={themeOption.id}\n                  variant=\"ghost\"\n                  className={`p-3 justify-start border-2 ${\n                    theme === themeOption.id \n                      ? 'border-primary bg-accent' \n                      : 'border-border hover:border-primary'\n                  }`}\n                  onClick={() => {\n                    setTheme(themeOption.id as any);\n                    audioManager.play('whoosh');\n                  }}\n                  data-testid={`theme-option-${themeOption.id.toLowerCase().replace(' ', '-')}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div \n                      className=\"w-4 h-4 rounded-full\"\n                      style={{ backgroundColor: themeOption.color }}\n                    />\n                    <span>{themeOption.name}</span>\n                  </div>\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {/* Font Size */}\n          <div>\n            <Label className=\"block text-sm font-medium mb-2 text-muted-foreground\">\n              Font Size: {fontSize}px\n            </Label>\n            <Slider\n              value={[fontSize]}\n              onValueChange={([value]) => setFontSize(value)}\n              min={16}\n              max={32}\n              step={1}\n              className=\"w-full\"\n              data-testid=\"slider-font-size\"\n            />\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"grid grid-cols-2 gap-3 pt-4\">\n            <Button\n              variant=\"ghost\"\n              onClick={handleReset}\n              className=\"bg-accent text-accent-foreground hover:opacity-90\"\n              data-testid=\"button-reset-defaults\"\n            >\n              Reset Defaults\n            </Button>\n            <Button\n              onClick={handleApply}\n              className=\"bg-primary text-primary-foreground hover:opacity-90\"\n              data-testid=\"button-apply-settings\"\n            >\n              Apply\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3919},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/enhanced-text.tsx":{"content":"import { ReactElement } from 'react';\nimport { LearningTooltip } from '@/components/ui/learning-tooltip';\nimport { useLearningMode } from '@/hooks/use-learning-mode';\nimport { vocabularyData, ligatureData } from '@/lib/language-data';\n\ninterface EnhancedTextProps {\n  children: string;\n  className?: string;\n  isAurebesh?: boolean;\n}\n\n// Common Star Wars words that should have tooltips\nconst STAR_WARS_WORDS = Object.keys(vocabularyData);\n\n// Common ligatures to detect\nconst LIGATURES = Object.keys(ligatureData);\n\nexport function EnhancedText({ children, className = \"\", isAurebesh = false }: EnhancedTextProps) {\n  const { settings, isLearningModeEnabled } = useLearningMode();\n\n  if (!isLearningModeEnabled) {\n    return <span className={className}>{children}</span>;\n  }\n\n  const processText = (text: string): ReactElement[] => {\n    const elements: ReactElement[] = [];\n    let currentIndex = 0;\n\n    // If it's Aurebesh text, add character tooltips\n    if (isAurebesh && settings.characterTooltips) {\n      return text.split('').map((char, index) => {\n        if (/[A-Za-z]/.test(char)) {\n          return (\n            <LearningTooltip key={index} text={char.toUpperCase()} type=\"character\">\n              {char}\n            </LearningTooltip>\n          );\n        }\n        return <span key={index}>{char}</span>;\n      });\n    }\n\n    // For English text, look for vocabulary words and ligatures\n    const words = text.split(/(\\s+|[^\\w\\s]+)/);\n    \n    return words.map((segment, index) => {\n      const cleanWord = segment.toLowerCase().replace(/[^\\w]/g, '');\n      \n      // Check for vocabulary words\n      if (settings.vocabularyTooltips && STAR_WARS_WORDS.includes(cleanWord)) {\n        return (\n          <LearningTooltip key={index} text={cleanWord} type=\"vocabulary\">\n            {segment}\n          </LearningTooltip>\n        );\n      }\n      \n      // Check for ligatures within the word\n      if (settings.ligatureTooltips) {\n        let processedSegment = segment;\n        let hasLigature = false;\n        \n        for (const ligature of LIGATURES) {\n          if (cleanWord.includes(ligature)) {\n            hasLigature = true;\n            break;\n          }\n        }\n        \n        if (hasLigature) {\n          return (\n            <LearningTooltip key={index} text={cleanWord} type=\"ligature\">\n              {segment}\n            </LearningTooltip>\n          );\n        }\n      }\n      \n      return <span key={index}>{segment}</span>;\n    });\n  };\n\n  const processedElements = processText(children);\n\n  return <span className={className}>{processedElements}</span>;\n}","size_bytes":2596},"client/src/components/ui/learning-tooltip.tsx":{"content":"import { ReactNode } from 'react';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\nimport { characterData, ligatureData, vocabularyData, type CharacterInfo, type LigatureInfo, type VocabularyInfo } from '@/lib/language-data';\n\ninterface LearningTooltipProps {\n  children: ReactNode;\n  text: string;\n  type: 'character' | 'ligature' | 'vocabulary' | 'custom';\n  customContent?: {\n    title: string;\n    description: string;\n    examples?: string[];\n    pronunciation?: string;\n  };\n  className?: string;\n}\n\nexport function LearningTooltip({ \n  children, \n  text, \n  type, \n  customContent,\n  className = \"\"\n}: LearningTooltipProps) {\n  const renderCharacterTooltip = (info: CharacterInfo) => (\n    <div className=\"space-y-2 max-w-sm\">\n      <div className=\"flex items-center space-x-2\">\n        <span className=\"text-lg font-aurebesh\">{info.aurebesh}</span>\n        <div>\n          <div className=\"font-semibold\">{info.character}</div>\n          <div className=\"text-xs text-muted-foreground\">/{info.pronunciation}/</div>\n        </div>\n      </div>\n      <p className=\"text-sm\">{info.description}</p>\n      {info.examples.length > 0 && (\n        <div>\n          <div className=\"text-xs font-medium text-muted-foreground mb-1\">Examples:</div>\n          <div className=\"text-xs space-y-1\">\n            {info.examples.slice(0, 2).map((example, idx) => (\n              <div key={idx} className=\"text-muted-foreground\">• {example}</div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  const renderLigatureTooltip = (info: LigatureInfo) => (\n    <div className=\"space-y-2 max-w-sm\">\n      <div className=\"flex items-center space-x-2\">\n        <span className=\"text-lg font-aurebesh\">{info.aurebesh}</span>\n        <div>\n          <div className=\"font-semibold\">{info.ligature.toUpperCase()}</div>\n          <div className=\"text-xs text-muted-foreground\">/{info.pronunciation}/</div>\n        </div>\n      </div>\n      <p className=\"text-sm\">{info.description}</p>\n      <p className=\"text-xs text-muted-foreground\">{info.usage}</p>\n      {info.examples.length > 0 && (\n        <div>\n          <div className=\"text-xs font-medium text-muted-foreground mb-1\">Examples:</div>\n          <div className=\"text-xs space-y-1\">\n            {info.examples.slice(0, 3).map((example, idx) => (\n              <div key={idx} className=\"text-muted-foreground\">• {example}</div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  const renderVocabularyTooltip = (info: VocabularyInfo) => (\n    <div className=\"space-y-2 max-w-sm\">\n      <div>\n        <div className=\"font-semibold\">{info.word}</div>\n        <div className=\"text-xs text-muted-foreground\">/{info.pronunciation}/ • {info.category}</div>\n      </div>\n      <p className=\"text-sm\">{info.definition}</p>\n      <p className=\"text-xs text-muted-foreground italic\">{info.context}</p>\n      {info.examples.length > 0 && (\n        <div>\n          <div className=\"text-xs font-medium text-muted-foreground mb-1\">Usage:</div>\n          <div className=\"text-xs space-y-1\">\n            {info.examples.slice(0, 2).map((example, idx) => (\n              <div key={idx} className=\"text-muted-foreground\">• {example}</div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  const renderCustomTooltip = (content: NonNullable<typeof customContent>) => (\n    <div className=\"space-y-2 max-w-sm\">\n      <div>\n        <div className=\"font-semibold\">{content.title}</div>\n        {content.pronunciation && (\n          <div className=\"text-xs text-muted-foreground\">/{content.pronunciation}/</div>\n        )}\n      </div>\n      <p className=\"text-sm\">{content.description}</p>\n      {content.examples && content.examples.length > 0 && (\n        <div>\n          <div className=\"text-xs font-medium text-muted-foreground mb-1\">Examples:</div>\n          <div className=\"text-xs space-y-1\">\n            {content.examples.slice(0, 3).map((example, idx) => (\n              <div key={idx} className=\"text-muted-foreground\">• {example}</div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  const getTooltipContent = () => {\n    const key = text.toLowerCase();\n    \n    switch (type) {\n      case 'character':\n        const charInfo = characterData[text.toUpperCase()];\n        return charInfo ? renderCharacterTooltip(charInfo) : null;\n      \n      case 'ligature':\n        const ligInfo = ligatureData[key];\n        return ligInfo ? renderLigatureTooltip(ligInfo) : null;\n      \n      case 'vocabulary':\n        const vocabInfo = vocabularyData[key];\n        return vocabInfo ? renderVocabularyTooltip(vocabInfo) : null;\n      \n      case 'custom':\n        return customContent ? renderCustomTooltip(customContent) : null;\n      \n      default:\n        return null;\n    }\n  };\n\n  const tooltipContent = getTooltipContent();\n  \n  // If no tooltip content available, return children without tooltip\n  if (!tooltipContent) {\n    return <>{children}</>;\n  }\n\n  return (\n    <TooltipProvider>\n      <Tooltip delayDuration={300}>\n        <TooltipTrigger asChild className={className}>\n          <span className=\"cursor-help border-b border-dotted border-current hover:border-solid transition-colors\">\n            {children}\n          </span>\n        </TooltipTrigger>\n        <TooltipContent side=\"top\" className=\"bg-card border-border text-card-foreground max-w-sm\">\n          {tooltipContent}\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}","size_bytes":5549},"client/src/hooks/use-learning-mode.ts":{"content":"import { useState, useEffect } from 'react';\n\nexport interface LearningModeSettings {\n  characterTooltips: boolean;\n  ligatureTooltips: boolean;\n  vocabularyTooltips: boolean;\n  autoDetectWords: boolean;\n  tooltipDelay: number;\n}\n\nconst DEFAULT_SETTINGS: LearningModeSettings = {\n  characterTooltips: true,\n  ligatureTooltips: true,\n  vocabularyTooltips: true,\n  autoDetectWords: true,\n  tooltipDelay: 300\n};\n\nexport function useLearningMode() {\n  const [settings, setSettings] = useState<LearningModeSettings>(() => {\n    if (typeof window !== 'undefined') {\n      const saved = localStorage.getItem('learning-mode-settings');\n      return saved ? { ...DEFAULT_SETTINGS, ...JSON.parse(saved) } : DEFAULT_SETTINGS;\n    }\n    return DEFAULT_SETTINGS;\n  });\n\n  const [isLearningModeEnabled, setIsLearningModeEnabled] = useState(() => {\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem('learning-mode-enabled') === 'true';\n    }\n    return false;\n  });\n\n  useEffect(() => {\n    localStorage.setItem('learning-mode-settings', JSON.stringify(settings));\n  }, [settings]);\n\n  useEffect(() => {\n    localStorage.setItem('learning-mode-enabled', isLearningModeEnabled.toString());\n  }, [isLearningModeEnabled]);\n\n  const updateSetting = <K extends keyof LearningModeSettings>(\n    key: K,\n    value: LearningModeSettings[K]\n  ) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n  };\n\n  const toggleLearningMode = () => {\n    setIsLearningModeEnabled(prev => !prev);\n  };\n\n  const resetSettings = () => {\n    setSettings(DEFAULT_SETTINGS);\n  };\n\n  return {\n    settings,\n    isLearningModeEnabled,\n    updateSetting,\n    toggleLearningMode,\n    resetSettings\n  };\n}","size_bytes":1691},"client/src/lib/language-data.ts":{"content":"// Language learning data for contextual tooltips\nexport interface CharacterInfo {\n  character: string;\n  aurebesh: string;\n  pronunciation: string;\n  description: string;\n  examples: string[];\n}\n\nexport interface LigatureInfo {\n  ligature: string;\n  aurebesh: string;\n  pronunciation: string;\n  description: string;\n  usage: string;\n  examples: string[];\n}\n\nexport interface VocabularyInfo {\n  word: string;\n  pronunciation: string;\n  definition: string;\n  category: string;\n  context: string;\n  examples: string[];\n}\n\n// Aurebesh character information\nexport const characterData: Record<string, CharacterInfo> = {\n  'A': {\n    character: 'A',\n    aurebesh: 'A',\n    pronunciation: 'ah',\n    description: 'The first letter of the Aurebesh alphabet, equivalent to the Basic letter A.',\n    examples: ['Aurek (A)', 'Admiral', 'Alliance']\n  },\n  'B': {\n    character: 'B',\n    aurebesh: 'B',\n    pronunciation: 'besh',\n    description: 'The second letter, representing the sound \"B\". Named \"Besh\" in Aurebesh.',\n    examples: ['Besh (B)', 'Blaster', 'Base']\n  },\n  'C': {\n    character: 'C',\n    aurebesh: 'C',\n    pronunciation: 'cresh',\n    description: 'The third letter, representing the \"C\" sound. Called \"Cresh\".',\n    examples: ['Cresh (C)', 'Clone', 'Cantina']\n  },\n  'D': {\n    character: 'D',\n    aurebesh: 'D',\n    pronunciation: 'dorn',\n    description: 'The fourth letter, representing \"D\". Known as \"Dorn\".',\n    examples: ['Dorn (D)', 'Droid', 'Death Star']\n  },\n  'E': {\n    character: 'E',\n    aurebesh: 'E',\n    pronunciation: 'esk',\n    description: 'The fifth letter, representing \"E\". Called \"Esk\".',\n    examples: ['Esk (E)', 'Empire', 'Emperor']\n  },\n  'F': {\n    character: 'F',\n    aurebesh: 'F',\n    pronunciation: 'forn',\n    description: 'The sixth letter, representing \"F\". Known as \"Forn\".',\n    examples: ['Forn (F)', 'Force', 'Fighter']\n  },\n  'G': {\n    character: 'G',\n    aurebesh: 'G',\n    pronunciation: 'grek',\n    description: 'The seventh letter, representing \"G\". Called \"Grek\".',\n    examples: ['Grek (G)', 'Galaxy', 'General']\n  },\n  'H': {\n    character: 'H',\n    aurebesh: 'H',\n    pronunciation: 'herf',\n    description: 'The eighth letter, representing \"H\". Known as \"Herf\".',\n    examples: ['Herf (H)', 'Hoth', 'Hyperdrive']\n  },\n  'I': {\n    character: 'I',\n    aurebesh: 'I',\n    pronunciation: 'isk',\n    description: 'The ninth letter, representing \"I\". Called \"Isk\".',\n    examples: ['Isk (I)', 'Imperial', 'Ion']\n  },\n  'J': {\n    character: 'J',\n    aurebesh: 'J',\n    pronunciation: 'jenth',\n    description: 'The tenth letter, representing \"J\". Known as \"Jenth\".',\n    examples: ['Jenth (J)', 'Jedi', 'Jabba']\n  },\n  'K': {\n    character: 'K',\n    aurebesh: 'K',\n    pronunciation: 'krill',\n    description: 'The eleventh letter, representing \"K\". Called \"Krill\".',\n    examples: ['Krill (K)', 'Kenobi', 'Kamino']\n  },\n  'L': {\n    character: 'L',\n    aurebesh: 'L',\n    pronunciation: 'leth',\n    description: 'The twelfth letter, representing \"L\". Known as \"Leth\".',\n    examples: ['Leth (L)', 'Luke', 'Lightsaber']\n  },\n  'M': {\n    character: 'M',\n    aurebesh: 'M',\n    pronunciation: 'mern',\n    description: 'The thirteenth letter, representing \"M\". Called \"Mern\".',\n    examples: ['Mern (M)', 'Master', 'Millennium']\n  },\n  'N': {\n    character: 'N',\n    aurebesh: 'N',\n    pronunciation: 'nern',\n    description: 'The fourteenth letter, representing \"N\". Known as \"Nern\".',\n    examples: ['Nern (N)', 'Naboo', 'New Republic']\n  },\n  'O': {\n    character: 'O',\n    aurebesh: 'O',\n    pronunciation: 'osk',\n    description: 'The fifteenth letter, representing \"O\". Called \"Osk\".',\n    examples: ['Osk (O)', 'Obi-Wan', 'Order']\n  },\n  'P': {\n    character: 'P',\n    aurebesh: 'P',\n    pronunciation: 'peth',\n    description: 'The sixteenth letter, representing \"P\". Known as \"Peth\".',\n    examples: ['Peth (P)', 'Padmé', 'Planet']\n  },\n  'Q': {\n    character: 'Q',\n    aurebesh: 'Q',\n    pronunciation: 'qek',\n    description: 'The seventeenth letter, representing \"Q\". Called \"Qek\".',\n    examples: ['Qek (Q)', 'Queen', 'Qui-Gon']\n  },\n  'R': {\n    character: 'R',\n    aurebesh: 'R',\n    pronunciation: 'resh',\n    description: 'The eighteenth letter, representing \"R\". Known as \"Resh\".',\n    examples: ['Resh (R)', 'Rebel', 'Republic']\n  },\n  'S': {\n    character: 'S',\n    aurebesh: 'S',\n    pronunciation: 'senth',\n    description: 'The nineteenth letter, representing \"S\". Called \"Senth\".',\n    examples: ['Senth (S)', 'Sith', 'Star']\n  },\n  'T': {\n    character: 'T',\n    aurebesh: 'T',\n    pronunciation: 'trill',\n    description: 'The twentieth letter, representing \"T\". Known as \"Trill\".',\n    examples: ['Trill (T)', 'Tatooine', 'TIE Fighter']\n  },\n  'U': {\n    character: 'U',\n    aurebesh: 'U',\n    pronunciation: 'usk',\n    description: 'The twenty-first letter, representing \"U\". Called \"Usk\".',\n    examples: ['Usk (U)', 'Utapau', 'Uncle']\n  },\n  'V': {\n    character: 'V',\n    aurebesh: 'V',\n    pronunciation: 'vev',\n    description: 'The twenty-second letter, representing \"V\". Known as \"Vev\".',\n    examples: ['Vev (V)', 'Vader', 'Victory']\n  },\n  'W': {\n    character: 'W',\n    aurebesh: 'W',\n    pronunciation: 'wesk',\n    description: 'The twenty-third letter, representing \"W\". Called \"Wesk\".',\n    examples: ['Wesk (W)', 'Wookiee', 'War']\n  },\n  'X': {\n    character: 'X',\n    aurebesh: 'X',\n    pronunciation: 'xesh',\n    description: 'The twenty-fourth letter, representing \"X\". Known as \"Xesh\".',\n    examples: ['Xesh (X)', 'X-wing', 'Exogorth']\n  },\n  'Y': {\n    character: 'Y',\n    aurebesh: 'Y',\n    pronunciation: 'yirt',\n    description: 'The twenty-fifth letter, representing \"Y\". Called \"Yirt\".',\n    examples: ['Yirt (Y)', 'Yoda', 'Yavin']\n  },\n  'Z': {\n    character: 'Z',\n    aurebesh: 'Z',\n    pronunciation: 'zerek',\n    description: 'The twenty-sixth letter, representing \"Z\". Known as \"Zerek\".',\n    examples: ['Zerek (Z)', 'Zam', 'Zero']\n  }\n};\n\n// Ligature information\nexport const ligatureData: Record<string, LigatureInfo> = {\n  'ch': {\n    ligature: 'ch',\n    aurebesh: String.fromCharCode(0xE011),\n    pronunciation: 'cherek',\n    description: 'A common ligature combining C and H sounds.',\n    usage: 'Used for the \"ch\" sound in words like \"much\" or \"channel\"',\n    examples: ['channel', 'much', 'choice']\n  },\n  'sh': {\n    ligature: 'sh',\n    aurebesh: String.fromCharCode(0xE016),\n    pronunciation: 'shen',\n    description: 'A ligature for the \"sh\" sound.',\n    usage: 'Represents the soft \"sh\" sound found in many words',\n    examples: ['ship', 'flash', 'shield']\n  },\n  'th': {\n    ligature: 'th',\n    aurebesh: String.fromCharCode(0xE018),\n    pronunciation: 'thesh',\n    description: 'A ligature for the \"th\" sound.',\n    usage: 'Used for both soft and hard \"th\" sounds',\n    examples: ['the', 'think', 'breathe']\n  },\n  'ae': {\n    ligature: 'ae',\n    aurebesh: String.fromCharCode(0xE010),\n    pronunciation: 'enth',\n    description: 'A vowel ligature combining A and E.',\n    usage: 'Represents the \"ae\" diphthong sound',\n    examples: ['aeon', 'aesthetic']\n  },\n  'eo': {\n    ligature: 'eo',\n    aurebesh: String.fromCharCode(0xE012),\n    pronunciation: 'onith',\n    description: 'A vowel ligature combining E and O.',\n    usage: 'Used for the \"eo\" sound combination',\n    examples: ['people', 'jeopardy']\n  },\n  'kh': {\n    ligature: 'kh',\n    aurebesh: String.fromCharCode(0xE013),\n    pronunciation: 'krenth',\n    description: 'A consonant ligature for the \"kh\" sound.',\n    usage: 'Represents a guttural \"kh\" sound, common in alien names',\n    examples: ['Khajiit', 'khan']\n  },\n  'ng': {\n    ligature: 'ng',\n    aurebesh: String.fromCharCode(0xE014),\n    pronunciation: 'nenth',\n    description: 'A ligature for the \"ng\" sound.',\n    usage: 'Used for the nasal \"ng\" sound at the end of words',\n    examples: ['running', 'thing', 'long']\n  },\n  'oo': {\n    ligature: 'oo',\n    aurebesh: String.fromCharCode(0xE015),\n    pronunciation: 'orenth',\n    description: 'A vowel ligature for the long \"oo\" sound.',\n    usage: 'Represents the elongated \"oo\" sound',\n    examples: ['moon', 'soon', 'cool']\n  }\n};\n\n// Star Wars vocabulary with learning information\nexport const vocabularyData: Record<string, VocabularyInfo> = {\n  'jedi': {\n    word: 'Jedi',\n    pronunciation: 'JEH-die',\n    definition: 'A member of an ancient order of warrior-monks who use the Force',\n    category: 'Organizations',\n    context: 'The Jedi were peacekeepers of the Old Republic',\n    examples: ['Luke Skywalker became a Jedi Knight', 'The Jedi Temple on Coruscant']\n  },\n  'sith': {\n    word: 'Sith',\n    pronunciation: 'SITH',\n    definition: 'An order of Force-sensitive warriors who embrace the dark side',\n    category: 'Organizations',\n    context: 'The Sith seek power through passion and emotion',\n    examples: ['Darth Vader was a Sith Lord', 'The Rule of Two governs the Sith']\n  },\n  'force': {\n    word: 'Force',\n    pronunciation: 'FORCE',\n    definition: 'An energy field that binds all living things together',\n    category: 'Concepts',\n    context: 'The Force can be used for knowledge and defense',\n    examples: ['May the Force be with you', 'Strong with the Force you are']\n  },\n  'lightsaber': {\n    word: 'Lightsaber',\n    pronunciation: 'LITE-say-ber',\n    definition: 'An elegant weapon with a blade of pure energy',\n    category: 'Weapons',\n    context: 'The weapon of a Jedi Knight, civilized and precise',\n    examples: ['Obi-Wan ignited his blue lightsaber', 'A Jedi constructs their own lightsaber']\n  },\n  'empire': {\n    word: 'Empire',\n    pronunciation: 'EM-pire',\n    definition: 'The galactic government ruled by Emperor Palpatine',\n    category: 'Government',\n    context: 'Rose from the ashes of the Republic after the Clone Wars',\n    examples: ['The Empire Strikes Back', 'Imperial stormtroopers patrol the galaxy']\n  },\n  'rebel': {\n    word: 'Rebel',\n    pronunciation: 'REH-bel',\n    definition: 'A member of the Alliance fighting against the Empire',\n    category: 'Organizations',\n    context: 'The Rebel Alliance seeks to restore freedom to the galaxy',\n    examples: ['Princess Leia leads the Rebel Alliance', 'Rebel pilots destroyed the Death Star']\n  },\n  'droid': {\n    word: 'Droid',\n    pronunciation: 'DROID',\n    definition: 'An artificial being designed to assist organic life forms',\n    category: 'Technology',\n    context: 'Droids serve various functions throughout the galaxy',\n    examples: ['R2-D2 is an astromech droid', 'Protocol droids specialize in translation']\n  },\n  'hyperspace': {\n    word: 'Hyperspace',\n    pronunciation: 'HI-per-space',\n    definition: 'An alternate dimension allowing faster-than-light travel',\n    category: 'Technology',\n    context: 'Ships enter hyperspace to travel between star systems',\n    examples: ['The Millennium Falcon jumped to hyperspace', 'Calculating hyperspace coordinates']\n  }\n};","size_bytes":10887}},"version":1}